"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[208],{3043:(e,n,o)=>{o(7294)},7235:(e,n,o)=>{o.d(n,{Z:()=>a});var t=o(614),r=o(7294);const a=e=>{let{language:n,code:o}=e;return r.createElement(t.Z,{language:n},o)}},9339:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var t=o(7462),r=(o(7294),o(3905)),a=(o(3043),o(7235));const i={sidebar_position:2,sidebar_label:"Config and Error Handling",title:"Manage Momento Configuration and Error Handling in TypeScript and Node.js",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in TypeScript and Node.js",keywords:["momento","cache","configuration","error handling","exceptions","sdk","production ready","typescript","node.js","nodejs","javascript"]},d="How to Manage Configuration and Error Handling in the Momento Node.js SDK",s={unversionedId:"cache/develop/sdks/nodejs/config-and-error-handling",id:"cache/develop/sdks/nodejs/config-and-error-handling",title:"Manage Momento Configuration and Error Handling in TypeScript and Node.js",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in TypeScript and Node.js",source:"@site/docs/cache/develop/sdks/nodejs/config-and-error-handling.mdx",sourceDirName:"cache/develop/sdks/nodejs",slug:"/cache/develop/sdks/nodejs/config-and-error-handling",permalink:"/cache/develop/sdks/nodejs/config-and-error-handling",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/cache/develop/sdks/nodejs/config-and-error-handling.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Config and Error Handling",title:"Manage Momento Configuration and Error Handling in TypeScript and Node.js",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in TypeScript and Node.js",keywords:["momento","cache","configuration","error handling","exceptions","sdk","production ready","typescript","node.js","nodejs","javascript"]},sidebar:"tutorialSidebar",previous:{title:"Cache Cheat Sheet",permalink:"/cache/develop/sdks/nodejs/cheat-sheet"},next:{title:"Observability",permalink:"/cache/develop/sdks/nodejs/observability"}},c={},l=[],p={toc:l};function u(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-manage-configuration-and-error-handling-in-the-momento-nodejs-sdk"},"How to Manage Configuration and Error Handling in the Momento Node.js SDK"),(0,r.kt)("p",null,"The code below illustrates the simplest way to construct a ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheClient"),":"),(0,r.kt)(a.Z,{language:"javascript",code:"const cacheClient = await CacheClient.create({\n  credentialProvider: CredentialProvider.fromEnvVar('MOMENTO_API_KEY'),\n  defaultTtlSeconds: 60,\n});",mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("p",null,"However, you may pass in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Configuration")," object to customize the behavior."),(0,r.kt)("p",null,"Momento provides several pre-built configurations in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Configurations")," module, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"InRegion")," (which is configured\nwith timeouts and connection counts that are appropriate for server-side connectivity from within the same AWS region),\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"Lambda")," (which is tuned for use in AWS Lambda environments). Here is how you can specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lambda")," configuration:"),(0,r.kt)(a.Z,{language:"javascript",code:"const cacheClient = await CacheClient.create({\n  configuration: Configurations.Lambda.latest(),\n  credentialProvider: CredentialProvider.fromEnvVar('MOMENTO_API_KEY'),\n  defaultTtlSeconds: 60,\n});",mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you omit the configuration, Momento will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Laptop")," configuration by default. This configuration has relaxed\ntimeouts, suitable for development or in high-latency environments. (It is not recommended for production, server-side use.)")),(0,r.kt)("p",null,"For more information about ",(0,r.kt)("inlineCode",{parentName:"p"},"Configuration")," objects see ",(0,r.kt)("a",{parentName:"p",href:"/cache/develop/basics/client-configuration-objects"},"SDK Configuration Objects"),"."),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheClient")," errors are surfaced to developers as part of the return values of the calls, as opposed to throwing\nexceptions. This makes errors more visible when you're writing your code, and allows your IDE to be more helpful in ensuring\nyou've handled the errors you care about."),(0,r.kt)("p",null,"Here's an example of how to check for errors on a ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," call:"),(0,r.kt)(a.Z,{language:"javascript",code:"const result = await cacheClient.get('test-cache', 'test-key');\nif (result instanceof CacheGet.Hit) {\n  console.log(`Retrieved value for key 'test-key': ${result.valueString()}`);\n} else if (result instanceof CacheGet.Miss) {\n  console.log(\"Key 'test-key' was not found in cache 'test-cache'\");\n} else if (result instanceof CacheGet.Error) {\n  throw new Error(\n    `An error occurred while attempting to get key 'test-key' from cache 'test-cache': ${result.errorCode()}: ${result.toString()}`\n  );\n}",mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("p",null,"However, if you prefer for exceptions to be thrown, you can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheClient")," to do so:"),(0,r.kt)(a.Z,{language:"javascript",code:"const cacheClient = await CacheClient.create({\n  configuration: Configurations.Lambda.latest().withThrowOnErrors(true),\n  credentialProvider: CredentialProvider.fromEnvVar('MOMENTO_API_KEY'),\n  defaultTtlSeconds: 60,\n});",mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("p",null,"With this configuration setting, any errors that occur will result in an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"SdkError")," being thrown. You may\ncatch it and use its ",(0,r.kt)("inlineCode",{parentName:"p"},".errorCode()")," method to determine the specific error that occurred:"),(0,r.kt)(a.Z,{language:"javascript",code:"try {\n  const result = (await cacheClient.get('test-cache', 'test-key')).value();\n  if (result !== undefined) {\n    console.log(`Retrieved value for key 'test-key': ${result}`);\n  } else {\n    console.log(\"Key 'test-key' was not found in cache 'test-cache'\");\n  }\n} catch (e) {\n  const momentoError = e as SdkError;\n  if (momentoError.errorCode() === MomentoErrorCode.LIMIT_EXCEEDED_ERROR) {\n    console.log('Request rate limit exceeded, may need to request a limit increase!');\n  } else {\n    throw new Error(\n      `An error occurred while attempting to get key 'test-key' from cache 'test-cache': ${momentoError.errorCode()}: ${momentoError.toString()}`\n    );\n  }\n}",mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("p",null,"For more information about error handling in Momento see ",(0,r.kt)("a",{parentName:"p",href:"/cache/develop/basics/error-handling-production-readiness"},"SDK Error Handling"),"."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[4694],{5162:(e,r,t)=>{t.d(r,{Z:()=>o});var a=t(7294),l=t(6010);const n={tabItem:"tabItem_Ymn6"};function o(e){let{children:r,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(n.tabItem,o),hidden:t},r)}},4866:(e,r,t)=>{t.d(r,{Z:()=>w});var a=t(7462),l=t(7294),n=t(6010),o=t(2466),s=t(6550),i=t(1980),d=t(7392),u=t(12);function c(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:r,label:t,attributes:a,default:l}}=e;return{value:r,label:t,attributes:a,default:l}}))}function m(e){const{values:r,children:t}=e;return(0,l.useMemo)((()=>{const e=r??c(t);return function(e){const r=(0,d.l)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function p(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function h(e){let{queryString:r=!1,groupId:t}=e;const a=(0,s.k6)(),n=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,i._X)(n),(0,l.useCallback)((e=>{if(!n)return;const r=new URLSearchParams(a.location.search);r.set(n,e),a.replace({...a.location,search:r.toString()})}),[n,a])]}function k(e){const{defaultValue:r,queryString:t=!1,groupId:a}=e,n=m(e),[o,s]=(0,l.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:r,tabValues:n}))),[i,d]=h({queryString:t,groupId:a}),[c,k]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[a,n]=(0,u.Nk)(t);return[a,(0,l.useCallback)((e=>{t&&n.set(e)}),[t,n])]}({groupId:a}),b=(()=>{const e=i??c;return p({value:e,tabValues:n})?e:null})();(0,l.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),k(e)}),[d,k,n]),tabValues:n}}var b=t(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:r,block:t,selectedValue:s,selectValue:i,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),m=e=>{const r=e.currentTarget,t=u.indexOf(r),a=d[t].value;a!==s&&(c(r),i(a))},p=e=>{let r=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;r=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;r=u[t]??u[u.length-1];break}}r?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":t},r)},d.map((e=>{let{value:r,label:t,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===r?0:-1,"aria-selected":s===r,key:r,ref:e=>u.push(e),onKeyDown:p,onClick:m},o,{className:(0,n.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":s===r})}),t??r)})))}function v(e){let{lazy:r,children:t,selectedValue:a}=e;const n=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=n.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},n.map(((e,r)=>(0,l.cloneElement)(e,{key:r,hidden:e.props.value!==a}))))}function y(e){const r=k(e);return l.createElement("div",{className:(0,n.Z)("tabs-container",f.tabList)},l.createElement(g,(0,a.Z)({},e,r)),l.createElement(v,(0,a.Z)({},e,r)))}function w(e){const r=(0,b.Z)();return l.createElement(y,(0,a.Z)({key:String(r)},e))}},3404:(e,r,t)=>{t(7294)},9720:(e,r,t)=>{t.d(r,{X:()=>s});var a=t(4866),l=t(5162),n=t(614),o=t(7294);const s=e=>{let{js:r,python:t,java:s,kotlin:i,go:d,csharp:u,php:c,rust:m,ruby:p,elixir:h,swift:k,dart:b,cli:f}=e;return r||t||s||i||d||u||c||m||p||h||k||b||f?o.createElement(a.Z,null,r&&o.createElement(l.Z,{value:"js",label:"JavaScript"},o.createElement(n.Z,{language:"js"},r)),t&&o.createElement(l.Z,{value:"python",label:"Python"},o.createElement(n.Z,{language:"python"},t)),s&&o.createElement(l.Z,{value:"java",label:"Java"},o.createElement(n.Z,{language:"java"},s)),i&&o.createElement(l.Z,{value:"kotlin",label:"Kotlin"},o.createElement(n.Z,{language:"kotlin"},i)),d&&o.createElement(l.Z,{value:"go",label:"Go"},o.createElement(n.Z,{language:"go"},d)),u&&o.createElement(l.Z,{value:"csharp",label:"C#"},o.createElement(n.Z,{language:"csharp"},u)),c&&o.createElement(l.Z,{value:"php",label:"PHP"},o.createElement(n.Z,{language:"php"},c)),m&&o.createElement(l.Z,{value:"rust",label:"Rust"},o.createElement(n.Z,{language:"rust"},m)),p&&o.createElement(l.Z,{value:"ruby",label:"Ruby"},o.createElement(n.Z,{language:"ruby"},p)),h&&o.createElement(l.Z,{value:"elixir",label:"Elixir"},o.createElement(n.Z,{language:"elixir"},h)),k&&o.createElement(l.Z,{value:"swift",label:"Swift"},o.createElement(n.Z,{language:"swift"},k)),b&&o.createElement(l.Z,{value:"dart",label:"Dart"},o.createElement(n.Z,{language:"dart"},b)),f&&o.createElement(l.Z,{value:"cli",label:"CLI"},o.createElement(n.Z,{language:"cli"},f))):null}},4512:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=t(7462),l=(t(7294),t(3905)),n=(t(3404),t(9720));const o={sidebar_position:2,sidebar_label:"API Reference",title:"Leaderboards API reference",description:"Learn how to interact programmatically with the Momento Leaderboards API.",hide_table_of_contents:!1},s="Using Momento Leaderboards",i={unversionedId:"leaderboards/api-reference/index",id:"leaderboards/api-reference/index",title:"Leaderboards API reference",description:"Learn how to interact programmatically with the Momento Leaderboards API.",source:"@site/docs/leaderboards/api-reference/index.mdx",sourceDirName:"leaderboards/api-reference",slug:"/leaderboards/api-reference/",permalink:"/leaderboards/api-reference/",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/leaderboards/api-reference/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"API Reference",title:"Leaderboards API reference",description:"Learn how to interact programmatically with the Momento Leaderboards API.",hide_table_of_contents:!1},sidebar:"leaderboardSidebar",previous:{title:"Momento Leaderboards",permalink:"/leaderboards/"},next:{title:"Auth",permalink:"/leaderboards/api-reference/auth"}},d={},u=[{value:"Leaderboard Client Methods",id:"leaderboard-client-methods",level:2},{value:"Create Leaderboard Client",id:"create-leaderboard-client",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Optional Parameters",id:"optional-parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Create a Leaderboard",id:"create-a-leaderboard",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Optional Parameters",id:"optional-parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Leaderboard Methods",id:"leaderboard-methods",level:2},{value:"Upsert elements",id:"upsert-elements",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Optional Parameters",id:"optional-parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Fetch elements by score",id:"fetch-elements-by-score",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Optional Parameters",id:"optional-parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Fetch elements by rank",id:"fetch-elements-by-rank",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Optional Parameters",id:"optional-parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Fetch elements by ID",id:"fetch-elements-by-id",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"Optional Parameters",id:"optional-parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Get leaderboard length",id:"get-leaderboard-length",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Optional Parameters",id:"optional-parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Remove elements",id:"remove-elements",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Optional Parameters",id:"optional-parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Delete leaderboard",id:"delete-leaderboard",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Optional Parameters",id:"optional-parameters-8",level:4},{value:"Returns",id:"returns-8",level:4}],c={toc:u},m="wrapper";function p(e){let{components:r,...t}=e;return(0,l.kt)(m,(0,a.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"using-momento-leaderboards"},"Using Momento Leaderboards"),(0,l.kt)("p",null,"Momento Leaderboards is a first-class service with purpose-built APIs that supports leaderboards with tens of millions of items and rapid ingestion/querying/updates."),(0,l.kt)("h2",{id:"leaderboard-client-methods"},"Leaderboard Client Methods"),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"create-leaderboard-client"},"Create Leaderboard Client"),(0,l.kt)("p",null,"To create and interact with leaderboards, you must first create a LeaderboardClient."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"configuration")," - ",(0,l.kt)("em",{parentName:"p"},"LeaderboardConfiguration")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Options for configuring your leaderboard client. For more information, see ",(0,l.kt)("a",{parentName:"li",href:"/cache/develop/basics/client-configuration-objects"},"SDK Configuration Objects"),".")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"credentialProvider")," - ",(0,l.kt)("em",{parentName:"p"},"CredentialProvider")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"See ",(0,l.kt)("a",{parentName:"li",href:"/cache/develop#instantiating-credential-providers-using-momento-api-keys"},"Instantiating CredentialProviders")," for more information on using your Momento API key")),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"PreviewLeaderboardClient object capable of creating new leaderboards and interacting with existing ones.")),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"new PreviewLeaderboardClient({\n  configuration: LeaderboardConfigurations.Laptop.v1(),\n  credentialProvider: CredentialProvider.fromEnvironmentVariable({\n    environmentVariableName: 'MOMENTO_API_KEY',\n  }),\n});",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"create-a-leaderboard"},"Create a Leaderboard"),(0,l.kt)("p",null,"Use a LeaderboardClient to create a leaderboard by specifying a cache and leaderboard name."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"cacheName")," - ",(0,l.kt)("em",{parentName:"p"},"string")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Which cache to create the leaderboard in")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"leaderboardName")," - ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"What to name the leaderboard")),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-1"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Leaderboard object or ",(0,l.kt)("a",{parentName:"p",href:"/leaderboards/api-reference/response-objects#error"},"Error"))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"// You can create multiple leaderboards using the same leaderboard client\n// but with different cache and leaderboard names\nleaderboardClient.leaderboard(cacheName, 'momento-leaderboard');\nleaderboardClient.leaderboard(cacheName, 'acorns-leaderboard');\n\n// Leaderboard and cache names must be non-empty strings\ntry {\n  leaderboardClient.leaderboard(cacheName, '   ');\n} catch (error) {\n  console.log('Expected error creating a leaderboard with invalid leaderboard name:', error);\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"leaderboard-methods"},"Leaderboard Methods"),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"upsert-elements"},"Upsert elements"),(0,l.kt)("p",null,"Inserts elements if they do not already exist in the leaderboard. Updates elements if they do already exist in the leaderboard. There are no partial failures; an upsert call will either succeed or fail."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Upsert is implemented as a batched operation, so for large leaderboards, you can upsert in batches of up to 8192 elements. "),(0,l.kt)(n.X,{js:"// To upsert a large number of elements, you must upsert\n// in batches of up to 8192 elements at a time.\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nconst elements = [...Array(totalNumElements).keys()].map(i => {\n  return {id: i + 1, score: i * Math.random()};\n});\nfor (let i = 0; i < totalNumElements; i += 8192) {\n  // Create a Map containing 8192 elements at a time\n  const batch = new Map(elements.slice(i, i + 8192).map(obj => [obj['id'], obj['score']]));\n\n  // Then upsert one batch at a time until all elements have been ingested\n  const result = await leaderboard.upsert(batch);\n  if (result instanceof LeaderboardUpsert.Error) {\n    console.log(`Error upserting batch [${i}, ${i + 8192})`);\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"})),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"elements")," - ",(0,l.kt)("em",{parentName:"p"},"Dictionary")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Dictionary of (id, score) pairs to upsert."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"id: integer"),(0,l.kt)("li",{parentName:"ul"},"score: double"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The id can be a player identifier, session identifier, browser identifier or any other kind of identifier you want to use for this scoreboard. The full unsigned 64 bit range is allowed here, between 0 and 2^63-1 inclusive. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"An id can only appear in a leaderboard one time, meaning you can't have two scores for one player unless that player has two ids!"))),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-2"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#success"},"LeaderboardUpsert.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardUpsert.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"// Upsert a set of elements as a Map\nconst elements1: Map<number, number> = new Map([\n  [123, 100.0],\n  [234, 200.0],\n  [345, 300.0],\n  [456, 400.0],\n]);\nconst result1 = await leaderboard.upsert(elements1);\nif (result1 instanceof LeaderboardUpsert.Success) {\n  console.log('Successfully upserted elements to leaderboard');\n} else if (result1 instanceof LeaderboardUpsert.Error) {\n  console.log('Upsert error:', result1.message());\n  throw new Error(\n    `An error occurred while attempting to call upsert on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result1.errorCode()}: ${result1.message()}`\n  );\n}\n\n// Or upsert a set of elements as a Record\nconst elements2: Record<number, number> = {\n  567: 500,\n  678: 600,\n  789: 700,\n  890: 800,\n};\nconst result2 = await leaderboard.upsert(elements2);\nif (result2 instanceof LeaderboardUpsert.Success) {\n  console.log('Successfully upserted elements to leaderboard');\n} else if (result2 instanceof LeaderboardUpsert.Error) {\n  console.log('Upsert error:', result2.message());\n  throw new Error(\n    `An error occurred while attempting to call upsert on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result2.errorCode()}: ${result2.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"fetch-elements-by-score"},"Fetch elements by score"),(0,l.kt)("p",null,"Fetches elements that fall within the specified min and max scores. "),(0,l.kt)("p",null,"Elements with the same score will be returned in alphanumerical order based on their ID (e.g. IDs of elements with the same score would be returned in the order ",(0,l.kt)("inlineCode",{parentName:"p"},"[1, 10, 123, 2, 234, ...]")," rather than ",(0,l.kt)("inlineCode",{parentName:"p"},"[1, 2, 10, 123, 234, ...]"),")."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"FetchByScore is implemented as a batch operation, so for large leaderboards, you can fetch in batches of up to 8192 elements."),(0,l.kt)("p",null,"You can page through multiple elements that fall within the requested score range using the ",(0,l.kt)("inlineCode",{parentName:"p"},"offset")," parameter until you receive an empty list, which indicates the end of the requested elements. "),(0,l.kt)(n.X,{js:"// Use the offset option to paginate through your results if your leaderboard\n// has more than 8192 elements.\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nfor (let offset = 0; offset < totalNumElements; offset += 8192) {\n  const result = await leaderboard.fetchByScore({offset});\n  if (result instanceof LeaderboardFetch.Success) {\n    processBatch(result.values());\n  } else if (result instanceof LeaderboardFetch.Error) {\n    console.log(\n      `Error fetching batch by score [${offset}, ${offset + 8192}) (${result.errorCode()}: ${result.message()})`\n    );\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"})),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-3"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"minScore")," - ",(0,l.kt)("em",{parentName:"p"},"double")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inclusive lower bound for the score range. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"-inf"),".")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"maxScore")," - ",(0,l.kt)("em",{parentName:"p"},"double")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Exclusive upper bound for the score range. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"+inf"),". ")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"order")," - ",(0,l.kt)("em",{parentName:"p"},"LeaderboardOrder enum")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Enum values: Ascending, Descending")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The order to fetch the elements in. Defaults to ascending, meaning 0 is the lowest-scoring rank. "))),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"offset")," - ",(0,l.kt)("em",{parentName:"p"},"integer")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The number of elements to skip before returning the first element. Defaults to 0. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Note: this is not the score of the first element to return, but the number of elements of the result set to skip before returning the first element."))),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"count")," - ",(0,l.kt)("em",{parentName:"p"},"integer")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The maximum number of elements to return. Defaults to 8192, which is the maximum that can be fetched per request.")),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#leaderboardfetchsuccess"},"LeaderboardFetch.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardFetch.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"// By default, FetchByScore will fetch the elements from the entire score range\n// with zero offset in ascending order. It can return 8192 elements at a time.\nconst result1 = await leaderboard.fetchByScore();\nif (result1 instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched elements using open score range:');\n  result1.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result1 instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call fetchByScore with no options on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result1.errorCode()}: ${result1.message()}`\n  );\n}\n\n// Example specifying all FetchByScore options. You can provide any subset of these options\n// to modify your FetchByScore request.\nconst result2 = await leaderboard.fetchByScore({\n  minScore: 10,\n  maxScore: 600,\n  order: LeaderboardOrder.Descending,\n  offset: 2,\n  count: 10,\n});\nif (result2 instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched elements by score using all options:');\n  result2.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result2 instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call fetchByScore with all options on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result2.errorCode()}: ${result2.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"fetch-elements-by-rank"},"Fetch elements by rank"),(0,l.kt)("p",null,"Fetches elements that fall within the specified min and max ranks."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"For large leaderboards, you will need to fetch in batches of up to 8192 elements."),(0,l.kt)(n.X,{js:"// Use the startRank and endRank options to paginate through your leaderboard\n// if your leaderboard has more than 8192 elements\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nfor (let rank = 0; rank < totalNumElements; rank += 8192) {\n  const result = await leaderboard.fetchByRank(rank, rank + 8192, {order: LeaderboardOrder.Descending});\n  if (result instanceof LeaderboardFetch.Success) {\n    processBatch(result.values());\n  } else if (result instanceof LeaderboardFetch.Error) {\n    console.log(\n      `Error fetching batch by rank [${rank}, ${rank + 8192}) (${result.errorCode()}: ${result.message()})`\n    );\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"})),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"startRank")," - ",(0,l.kt)("em",{parentName:"p"},"integer")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inclusive lower bound for the rank range. Defaults to 0.")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"endRank")," - ",(0,l.kt)("em",{parentName:"p"},"integer")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Exclusive upper bound for the rank range. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"startRank")," + 8192.")),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-4"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"order")," - ",(0,l.kt)("em",{parentName:"p"},"LeaderboardOrder enum")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Enum values: Ascending, Descending")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The order to fetch the elements in. Defaults to ascending, meaning 0 is the lowest-scoring rank."))),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#leaderboardfetchsuccess"},"LeaderboardFetch.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardFetch.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"// By default, FetchByRank will fetch the elements in the range [startRank, endRank)\n// in ascending order, meaning rank 0 is for the lowest score.\nconst result1 = await leaderboard.fetchByRank(0, 10);\nif (result1 instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched elements in rank range [0,10)');\n  result1.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result1 instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call fetchByRank with no options on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result1.errorCode()}: ${result1.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h2",{id:"fetch-elements-by-id"},"Fetch elements by ID"),(0,l.kt)("p",null,"Fetches elements given a list of element IDs. "),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"ids")," - ",(0,l.kt)("em",{parentName:"p"},"List")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"List of integers representing the ids of the elements to fetch.")),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-5"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"order")," - ",(0,l.kt)("em",{parentName:"p"},"LeaderboardOrder enum")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Enum values: Ascending, Descending")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The order to fetch the elements in. Defaults to ascending, meaning 0 is the lowest-scoring rank."))),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#leaderboardfetchsuccess"},"LeaderboardFetch.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardFetch.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"// Provide a list of element IDs to get their ranks in ascending or descending order\nconst result = await leaderboard.getRank([123, 456, 789], {\n  order: LeaderboardOrder.Descending,\n});\nif (result instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched the rank of 3 elements:');\n  result.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call getRank on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"get-leaderboard-length"},"Get leaderboard length"),(0,l.kt)("p",null,"Gets the number of entries in the leaderboard. The leaderboard name is inferred from the ",(0,l.kt)("inlineCode",{parentName:"p"},"Leaderboard")," object."),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-6"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#leaderboardlengthsuccess"},"LeaderboardLength.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardLength.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"const result = await leaderboard.length();\nif (result instanceof LeaderboardLength.Success) {\n  console.log('Successfully retrieved leaderboard length:', result.length());\n} else if (result instanceof LeaderboardLength.Error) {\n  throw new Error(\n    `An error occurred while attempting to call length on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"remove-elements"},"Remove elements"),(0,l.kt)("p",null,"Removes elements with the specified IDs."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"For large leaderboards, you will need to remove in batches of up to 8192 elements."),(0,l.kt)(n.X,{js:"// You can remove batches of 8192 elements at a time.\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nconst ids = [...Array(totalNumElements).keys()];\nfor (let i = 0; i < totalNumElements; i += 8192) {\n  const result = await leaderboard.removeElements(ids.slice(i, i + 8192));\n  if (result instanceof LeaderboardRemoveElements.Error) {\n    console.log(`Error removing batch [${i}, ${i + 8192}) (${result.errorCode()}: ${result.message()})`);\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"})),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"ids")," - ",(0,l.kt)("em",{parentName:"p"},"List")," "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A list of ids for the elements you want to remove.  ")),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-7"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#success"},"LeaderboardRemoveElements.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardRemoveElements.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"// Provide a list of element IDs to delete those elements\nconst result = await leaderboard.removeElements([123, 456, 789]);\nif (result instanceof LeaderboardRemoveElements.Success) {\n  console.log('Successfully removed elements');\n} else if (result instanceof LeaderboardRemoveElements.Error) {\n  throw new Error(\n    `An error occurred while attempting to call removeElements on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("h3",{id:"delete-leaderboard"},"Delete leaderboard"),(0,l.kt)("p",null,"Deletes the leaderboard. The leaderboard name is inferred from the ",(0,l.kt)("inlineCode",{parentName:"p"},"Leaderboard")," object."),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"optional-parameters-8"},"Optional Parameters"),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"One of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#success"},"LeaderboardDelete.Success")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/leaderboards/api-reference/response-objects#error"},"LeaderboardDelete.Error")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)(n.X,{js:"const result = await leaderboard.delete();\nif (result instanceof LeaderboardDelete.Success) {\n  console.log('Successfully deleted the leaderboard');\n} else if (result instanceof LeaderboardDelete.Error) {\n  throw new Error(\n    `An error occurred while attempting to call delete on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))),(0,l.kt)("hr",null))}p.isMDXComponent=!0}}]);
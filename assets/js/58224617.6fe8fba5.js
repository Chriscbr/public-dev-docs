"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[15],{3378:(e,t,n)=>{n.d(t,{A:()=>_});var a=n(7462),l=n(7294),c=n(6010),r=n(2389),i=n(7392),o=n(7094),s=n(2466);const m="tabList__CuJ",h="tabItem_LNqP";function u(e){var t;const{lazy:n,block:r,defaultValue:u,values:T,groupId:d,className:p}=e,k=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),_=T??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,i.l)(_,((e,t)=>e.value===t.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const C=null===u?u:u??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==C&&!_.some((e=>e.value===C)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${C}" but none of its children has the corresponding value. Available values are: ${_.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:S}=(0,o.U)(),[b,E]=(0,l.useState)(C),g=[],{blockElementScrollPositionUntilNextRender:v}=(0,s.o5)();if(null!=d){const e=y[d];null!=e&&e!==b&&_.some((t=>t.value===e))&&E(e)}const f=e=>{const t=e.currentTarget,n=g.indexOf(t),a=_[n].value;a!==b&&(v(t),E(a),null!=d&&S(d,String(a)))},M=e=>{var t;let n=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const t=g.indexOf(e.currentTarget)+1;n=g[t]??g[0];break}case"ArrowLeft":{const t=g.indexOf(e.currentTarget)-1;n=g[t]??g[g.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,c.Z)("tabs-container",m)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":r},p)},_.map((e=>{let{value:t,label:n,attributes:r}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>g.push(e),onKeyDown:M,onClick:f},r,{className:(0,c.Z)("tabs__item",h,null==r?void 0:r.className,{"tabs__item--active":b===t})}),n??t)}))),n?(0,l.cloneElement)(k.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function T(e){const t=(0,r.Z)();return l.createElement(u,(0,a.Z)({key:String(t)},e))}const d="tabItem_Ymn6";function p(e){let{children:t,hidden:n,className:a}=e;return l.createElement("div",{role:"tabpanel",className:(0,c.Z)(d,a),hidden:n},t)}var k=n(814);const _=e=>{let{js:t,python:n,java:a,go:c,csharp:r,rust:i,cli:o}=e;return l.createElement(T,null,l.createElement(p,{value:"js",label:"JavaScript"},l.createElement(k.Z,{language:"js"},t)),l.createElement(p,{value:"python",label:"Python"},l.createElement(k.Z,{language:"python"},n)),l.createElement(p,{value:"java",label:"Java"},l.createElement(k.Z,{language:"java"},a)),l.createElement(p,{value:"go",label:"Go"},l.createElement(k.Z,{language:"go"},c)),l.createElement(p,{value:"csharp",label:"C#"},l.createElement(k.Z,{language:"csharp"},r)),l.createElement(p,{value:"rust",label:"Rust"},l.createElement(k.Z,{language:"rust"},i)),l.createElement(p,{value:"cli",label:"CLI"},l.createElement(k.Z,{language:"cli"},o)))}},1355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=n(7462),l=(n(7294),n(3905)),c=n(3378);const r={sidebar_position:6,sidebar_class_name:"sidebar-item-api-reference"},i="API Reference",o={unversionedId:"API-reference",id:"API-reference",title:"API Reference",description:"Control APIs",source:"@site/docs/API-reference.mdx",sourceDirName:".",slug:"/API-reference",permalink:"/API-reference",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/API-reference.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,sidebar_class_name:"sidebar-item-api-reference"},sidebar:"tutorialSidebar",previous:{title:"Caching with AWS Lambda",permalink:"/guides/caching-with-aws-lambda"},next:{title:"Tutorial - Adding a cache to a serverless application",permalink:"/serverless-cache-walkthrough"}},s={},m=[{value:"Control APIs",id:"control-apis",level:2},{value:"Create Cache",id:"create-cache",level:3},{value:"Delete Cache",id:"delete-cache",level:3},{value:"List Caches",id:"list-caches",level:3},{value:"Data APIs",id:"data-apis",level:2},{value:"Set",id:"set",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3}],h={toc:m};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference"},"API Reference"),(0,l.kt)("h2",{id:"control-apis"},"Control APIs"),(0,l.kt)("h3",{id:"create-cache"},"Create Cache"),(0,l.kt)("p",null,"Creates a cache with provided name"),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache to be created.")))),(0,l.kt)(c.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.createCache('test-cache');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.create_cache('test-cache')\n",java:'\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.createCache("test-cache");\n    ',go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\nerr = client.CreateCache(&momento.CreateCacheRequest{\n    CacheName: "test-cache",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.CreateCacheAsync("test-cache");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("test-cache");\nmatch cache_client.create_cache(&cache_name).await {\n    Ok(_) => {}\n    Err(err) => {\n        eprintln!("{}", err);\n    }\n}\n',cli:"momento cache create --name test-cache",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"delete-cache"},"Delete Cache"),(0,l.kt)("p",null,"Deletes a cache"),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache to be deleted.")))),(0,l.kt)(c.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.deleteCache('test-cache');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.delete_cache('test-cache')\n",java:'\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.deleteCache("test-cache");\n    ',go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\nerr = client.DeleteCache(&momento.CreateCacheRequest{\n    CacheName: "test-cache",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.DeleteCacheAsync("test-cache");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("test-cache");\nmatch cache_client.delete_cache(&cache_name).await {\n    Ok(_) => {}\n    Err(err) => {\n        eprintln!("{}", err);\n    }\n}\n',cli:"momento cache delete-cache --name test-cache",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"list-caches"},"List Caches"),(0,l.kt)("p",null,"Lists all caches for the provided auth token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nextToken"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Token for pagination of caches.")))),(0,l.kt)("h2",{id:"data-apis"},"Data APIs"),(0,l.kt)("h3",{id:"set"},"Set"),(0,l.kt)("p",null,"Sets the value in cache with a given Time To Live (TTL) seconds. If a value for this key is already present it will be replaced by the new value."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be added.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The value to be stored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ttlSeconds"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to Live for the item in Cache.")))),(0,l.kt)(c.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.set('test-cache', 'test-key', 'test-value');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.set('test-cache', 'test-key', 'test-value')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.set('test-cache', 'test-key', 'test-value');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Set(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n    Value:     "test-value",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.SetAsync("test-cache", "test-key", "test-value");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .set(&cache_name, key.clone(), value.clone(), None)\n    .await\n    .unwrap();\n    ',cli:"momento cache set --key test-key --value test-value",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"get"},"Get"),(0,l.kt)("p",null,"Get the cache value stored for the given key."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be added.")))),(0,l.kt)(c.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.get('test-cache', 'test-key');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.get('test-cache', 'test-key')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.get('test-cache', 'test-key');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Get(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.GetAsync("test-cache", "test-key");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .get(&cache_name, key.clone())\n    .await\n    .unwrap();\n    ',cli:"momento cache get --key test-key --value test-value",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"delete"},"Delete"),(0,l.kt)("p",null,"Delete the cache value stored for the given key."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be deleted.")))),(0,l.kt)(c.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.delete('test-cache', 'test-key');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.delete('test-cache', 'test-key')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.delete('test-cache', 'test-key');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Delete(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.DeleteAsync("test-cache", "test-key");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .delete(&cache_name, key.clone())\n    .await\n    .unwrap();\n    ',cli:"momento cache delete --key test-key --value test-value",mdxType:"SdkExamples"}))}u.isMDXComponent=!0}}]);
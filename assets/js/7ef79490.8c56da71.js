"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[9748],{3043:(e,n,o)=>{o(7294)},7235:(e,n,o)=>{o.d(n,{Z:()=>a});var t=o(814),s=o(7294);const a=e=>{let{language:n,code:o}=e;return s.createElement(t.Z,{language:n},o)}},7159:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var t=o(7462),s=(o(7294),o(3905)),a=(o(3043),o(7235));const i={sidebar_position:2,title:"Momento JavaScript web SDK",pagination_prev:null,sidebar_label:"JS Web SDK",description:"Information about the Momento web SDK"},r="Momento web SDK for JavaScript in browsers",l={unversionedId:"develop/sdks/web/index",id:"develop/sdks/web/index",title:"Momento JavaScript web SDK",description:"Information about the Momento web SDK",source:"@site/docs/develop/sdks/web/index.md",sourceDirName:"develop/sdks/web",slug:"/develop/sdks/web/",permalink:"/develop/sdks/web/",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/develop/sdks/web/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Momento JavaScript web SDK",pagination_prev:null,sidebar_label:"JS Web SDK",description:"Information about the Momento web SDK"},sidebar:"tutorialSidebar",next:{title:"Python",permalink:"/develop/sdks/python/"}},c={},h=[{value:"Requirements",id:"requirements",level:2},{value:"Resources",id:"resources",level:2},{value:"Momento web SDK and Momento Topics",id:"momento-web-sdk-and-momento-topics",level:2},{value:"Using the web SDK for browsers",id:"using-the-web-sdk-for-browsers",level:2},{value:"Credentials for Browsers",id:"credentials-for-browsers",level:2},{value:"FAQ",id:"faq",level:2}],p={toc:h};function u(e){let{components:n,...o}=e;return(0,s.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"momento-web-sdk-for-javascript-in-browsers"},"Momento web SDK for JavaScript in browsers"),(0,s.kt)("p",null,"Momento provides two JavaScript SDKs; ",(0,s.kt)("a",{parentName:"p",href:"/develop/sdks/nodejs"},"one for Node.js")," and one for other web applications. The two SDKs have identical APIs, so your code will look the same except for ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," statements, but under the hood they are built for optimal performance and compatibility in different JavaScript runtime environments."),(0,s.kt)("img",{src:"/img/web.jpg",width:"90%",alt:"a picture of abstract web strung between node.js nodes."}),(0,s.kt)("p",null,"The Node.js SDK is best suited for server-side use cases. The Momento web SDK, however, allows developers to write JavaScript code that runs in a browser and communicates directly with Momento services. This allows you to avoid the typical overhead of building and operating your own web service to mediate cache or pub/sub calls between the browser and Momento. It also means one less hop for your web traffic, so you can get even better performance out of your browser application. The best of both worlds!"),(0,s.kt)("p",null,"You can also use the web SDK in other non-Node.js JavaScript environments."),(0,s.kt)("p",null,"The Momento web SDK is available via the npm package ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@gomomento/sdk-web"},(0,s.kt)("inlineCode",{parentName:"a"},"@gomomento/sdk-web")),"."),(0,s.kt)("p",null,"The source code can be found on GitHub: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/momentohq/client-sdk-javascript"},"momentohq/client-sdk-javascript"),"."),(0,s.kt)("h2",{id:"requirements"},"Requirements"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A Momento auth token is required; you can get one from the ",(0,s.kt)("a",{parentName:"li",href:"https://console.gomomento.com/"},"Momento web console"),".")),(0,s.kt)("h2",{id:"resources"},"Resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/develop/sdks/nodejs/cheat-sheet"},"Momento Node.js cheat sheet"),": this cheat sheet targets the Node.js SDK, but the web SDK APIs are fully compatible."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/momentohq/client-sdk-javascript/tree/main/examples/web/nextjs-chat"},"Chat app: Next.js"),": a dynamic app that allows users to chat in their browser by entering a cache and topic name. The application vends low scope, short-lived auth tokens to the browser which uses them to subscribe to the topic."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/momentohq/client-sdk-javascript/tree/main/examples/web/vite-chat-app"},"Chat app: Vite"),": a static version of the chat app that requires a separate API (such as our ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/momentohq/client-sdk-javascript/tree/main/examples/nodejs/token-vending-machine"},"Node.js token vending machine"),") to provide auth tokens to browsers."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/momentohq/client-sdk-javascript/blob/main/examples/web/README.md"},"Web SDK Examples"),": working example projects that illustrate how to use the web SDK"),(0,s.kt)("li",{parentName:"ul"},"COMING SOON: Taking your code to prod: configuration and error handling in the web SDK")),(0,s.kt)("h2",{id:"momento-web-sdk-and-momento-topics"},"Momento web SDK and Momento Topics"),(0,s.kt)("p",null,"Momento Topics significantly simplifies publisher-subscriber communication in a browser. Traditionally, developers example of this is a chat application embedded in a website; you are not only building the client code for the browser, but the server-side code for routing all the communications."),(0,s.kt)("p",null,"This server-side complexity is eliminated by incorporating Momento Topics with the Momento web SDK. Developers can subscribe to Momento Topics directly from the browser. Momento then takes care of all communication when messages are published to the topic, eliminating the need for custom server-side infrastructure for WebSockets!"),(0,s.kt)("h2",{id:"using-the-web-sdk-for-browsers"},"Using the web SDK for browsers"),(0,s.kt)("p",null,"While the API calls are ",(0,s.kt)("a",{parentName:"p",href:"/develop/sdks/nodejs/cheat-sheet"},"identical to the Momento Node.js SDK"),", the import/require statement will consume the ",(0,s.kt)("inlineCode",{parentName:"p"},"@gomomento/sdk-web")," package from npm, instead of ",(0,s.kt)("inlineCode",{parentName:"p"},"@gomomento/sdk")," (which is the Node.js SDK)."),(0,s.kt)("p",null,"Here's an example import statement for the web SDK:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"import {CacheClient} from \u2018@gomomento/sdk-web\u2019;")),(0,s.kt)("h2",{id:"credentials-for-browsers"},"Credentials for Browsers"),(0,s.kt)("p",null,"In order for your browser application to communicate with Momento services, you will need to provide the browser with a Momento auth token. The recommended practice is to generate a Momento auth token that has expiring credentials for each browser session. This enables the app to distribute tokens without worrying about your data being compromised."),(0,s.kt)("p",null,"To create a Momento auth token for use in the browser, you will generally have a web application using another Momento SDK such as the Node.js SDK. First, you will need to instantiate a Momento ",(0,s.kt)("inlineCode",{parentName:"p"},"AuthClient"),":"),(0,s.kt)(a.Z,{language:"javascript",code:"new AuthClient({\n  credentialProvider: CredentialProvider.fromEnvironmentVariable({\n    environmentVariableName: 'MOMENTO_AUTH_TOKEN',\n  }),\n});",mdxType:"SdkExampleCodeBlockImpl"}),(0,s.kt)("p",null,"Then you will use the ",(0,s.kt)("inlineCode",{parentName:"p"},"generateAuthToken")," API to create a token that you can vend to the browser:"),(0,s.kt)(a.Z,{language:"javascript",code:"// Generate a token that allows all data plane APIs on all caches and topics.\nconst allDataRWTokenResponse = await authClient.generateAuthToken(AllDataReadWrite, ExpiresIn.minutes(30));\nif (allDataRWTokenResponse instanceof GenerateAuthToken.Success) {\n  console.log('Generated an auth token with AllDataReadWrite scope!');\n  // logging only a substring of the tokens, because logging security credentials is not advisable :)\n  console.log(`Auth token starts with: ${allDataRWTokenResponse.authToken.substring(0, 10)}`);\n  console.log(`Refresh token starts with: ${allDataRWTokenResponse.refreshToken.substring(0, 10)}`);\n  console.log(`Expires At: ${allDataRWTokenResponse.expiresAt.epoch()}`);\n} else if (allDataRWTokenResponse instanceof GenerateAuthToken.Error) {\n  throw new Error(\n    `An error occurred while attempting to call generateAuthToken with AllDataReadWrite scope: ${allDataRWTokenResponse.errorCode()}: ${allDataRWTokenResponse.toString()}`\n  );\n}\n\n// Generate a token that can only call read-only data plane APIs on a specific cache foo. No topic apis (publish/subscribe) are allowed.\nconst singleCacheROTokenResponse = await authClient.generateAuthToken(\n  TokenScopes.cacheReadOnly('foo'),\n  ExpiresIn.minutes(30)\n);\nif (singleCacheROTokenResponse instanceof GenerateAuthToken.Success) {\n  console.log('Generated an auth token with read-only access to cache foo!');\n  // logging only a substring of the tokens, because logging security credentials is not advisable :)\n  console.log(`Auth token starts with: ${singleCacheROTokenResponse.authToken.substring(0, 10)}`);\n  console.log(`Refresh token starts with: ${singleCacheROTokenResponse.refreshToken.substring(0, 10)}`);\n  console.log(`Expires At: ${singleCacheROTokenResponse.expiresAt.epoch()}`);\n} else if (singleCacheROTokenResponse instanceof GenerateAuthToken.Error) {\n  throw new Error(\n    `An error occurred while attempting to call generateAuthToken with single cache read-only scope: ${singleCacheROTokenResponse.errorCode()}: ${singleCacheROTokenResponse.toString()}`\n  );\n}\n\n// Generate a token that can call all data plane APIs on all caches. No topic apis (publish/subscribe) are allowed.\nconst allCachesRWTokenResponse = await authClient.generateAuthToken(\n  TokenScopes.cacheReadWrite(AllCaches),\n  ExpiresIn.minutes(30)\n);\nif (allCachesRWTokenResponse instanceof GenerateAuthToken.Success) {\n  console.log('Generated an auth token with read-write access to all caches!');\n  // logging only a substring of the tokens, because logging security credentials is not advisable :)\n  console.log(`Auth token starts with: ${allCachesRWTokenResponse.authToken.substring(0, 10)}`);\n  console.log(`Refresh token starts with: ${allCachesRWTokenResponse.refreshToken.substring(0, 10)}`);\n  console.log(`Expires At: ${allCachesRWTokenResponse.expiresAt.epoch()}`);\n} else if (allCachesRWTokenResponse instanceof GenerateAuthToken.Error) {\n  throw new Error(\n    `An error occurred while attempting to call generateAuthToken with all caches read-write scope: ${allCachesRWTokenResponse.errorCode()}: ${allCachesRWTokenResponse.toString()}`\n  );\n}\n\n// Generate a token that can call publish and subscribe on all topics within cache bar\nconst singleCacheAllTopicsRWTokenResponse = await authClient.generateAuthToken(\n  TokenScopes.topicPublishSubscribe({name: 'bar'}, AllTopics),\n  ExpiresIn.minutes(30)\n);\nif (singleCacheAllTopicsRWTokenResponse instanceof GenerateAuthToken.Success) {\n  console.log('Generated an auth token with publish-subscribe access to all topics within cache bar!');\n  // logging only a substring of the tokens, because logging security credentials is not advisable :)\n  console.log(`Auth token starts with: ${singleCacheAllTopicsRWTokenResponse.authToken.substring(0, 10)}`);\n  console.log(`Refresh token starts with: ${singleCacheAllTopicsRWTokenResponse.refreshToken.substring(0, 10)}`);\n  console.log(`Expires At: ${singleCacheAllTopicsRWTokenResponse.expiresAt.epoch()}`);\n} else if (singleCacheAllTopicsRWTokenResponse instanceof GenerateAuthToken.Error) {\n  throw new Error(\n    `An error occurred while attempting to call generateAuthToken with read-write scope for all topics in a single cache: ${singleCacheAllTopicsRWTokenResponse.errorCode()}: ${singleCacheAllTopicsRWTokenResponse.toString()}`\n  );\n}\n\n// Generate a token that can only call subscribe on topic where_is_mo within cache mo_nuts\nconst oneCacheOneTopicRWTokenResponse = await authClient.generateAuthToken(\n  TokenScopes.topicSubscribeOnly('mo_nuts', 'where_is_mo'),\n  ExpiresIn.minutes(30)\n);\nif (oneCacheOneTopicRWTokenResponse instanceof GenerateAuthToken.Success) {\n  console.log('Generated an auth token with subscribe-only access to topic where_is_mo within cache mo_nuts!');\n  // logging only a substring of the tokens, because logging security credentials is not advisable :)\n  console.log(`Auth token starts with: ${oneCacheOneTopicRWTokenResponse.authToken.substring(0, 10)}`);\n  console.log(`Refresh token starts with: ${oneCacheOneTopicRWTokenResponse.refreshToken.substring(0, 10)}`);\n  console.log(`Expires At: ${oneCacheOneTopicRWTokenResponse.expiresAt.epoch()}`);\n} else if (oneCacheOneTopicRWTokenResponse instanceof GenerateAuthToken.Error) {\n  throw new Error(\n    `An error occurred while attempting to call generateAuthToken with read-write scope for single topic in a single cache: ${oneCacheOneTopicRWTokenResponse.errorCode()}: ${oneCacheOneTopicRWTokenResponse.toString()}`\n  );\n}\n\n// Generate a token with multiple permissions\nconst cachePermission1 = {\n  role: CacheRole.ReadWrite, // Managed role that grants access to read as well as write apis on caches\n  cache: 'acorns', // Scopes the access to a single cache named 'acorns'\n};\nconst cachePermission2 = {\n  role: CacheRole.ReadOnly, // Managed role that grants access to only read data apis on caches\n  cache: AllCaches, // Built-in value for access to all caches in the account\n};\nconst topicPermission1 = {\n  role: TopicRole.PublishSubscribe, // Managed role that grants access to subscribe as well as publish apis\n  cache: 'walnuts', // Scopes the access to a single cache named 'walnuts'\n  topic: 'mo_favorites', // Scopes the access to a single topic named 'mo_favorites' within cache 'walnuts'\n};\nconst topicPermission2 = {\n  role: TopicRole.SubscribeOnly, // Managed role that grants access to only subscribe api\n  cache: AllCaches, // Built-in value for all cache(s) in the account.\n  topic: AllTopics, // Built-in value for access to all topics in the listed cache(s).\n};\n\nconst permissions = {\n  permissions: [cachePermission1, cachePermission2, topicPermission1, topicPermission2],\n};\n\nconst multiplePermsTokenResponse = await authClient.generateAuthToken(permissions, ExpiresIn.minutes(30));\nif (multiplePermsTokenResponse instanceof GenerateAuthToken.Success) {\n  console.log('Generated an auth token with multiple cache and topic permissions!');\n  // logging only a substring of the tokens, because logging security credentials is not advisable :)\n  console.log(`Auth token starts with: ${multiplePermsTokenResponse.authToken.substring(0, 10)}`);\n  console.log(`Refresh token starts with: ${multiplePermsTokenResponse.refreshToken.substring(0, 10)}`);\n  console.log(`Expires At: ${multiplePermsTokenResponse.expiresAt.epoch()}`);\n} else if (multiplePermsTokenResponse instanceof GenerateAuthToken.Error) {\n  throw new Error(\n    `An error occurred while attempting to call generateAuthToken with multiple permissions: ${multiplePermsTokenResponse.errorCode()}: ${multiplePermsTokenResponse.toString()}`\n  );\n}",mdxType:"SdkExampleCodeBlockImpl"}),(0,s.kt)("p",null,"For more information on Momento auth tokens, including ",(0,s.kt)("inlineCode",{parentName:"p"},"TokenScope")," for authorization, and how to refresh expiring tokens, see ",(0,s.kt)("a",{parentName:"p",href:"/develop/guides/working-with-momento-auth-tokens"},"Working with Momento auth tokens"),"."),(0,s.kt)("h2",{id:"faq"},"FAQ"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Is the traffic from the browser encrypted?"),"As with all traffic with Momento services, the web SDK is fully encrypted on the wire. In addition, the SDK uses TLS 1.2+ encryption."))}u.isMDXComponent=!0}}]);
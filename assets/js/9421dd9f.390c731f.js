"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[3730],{9365:(e,t,a)=>{a.d(t,{A:()=>l});var n=a(6540),r=a(53);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:a},t)}},1470:(e,t,a)=>{a.d(t,{A:()=>S});var n=a(8168),r=a(6540),i=a(53),l=a(3104),c=a(6347),o=a(7485),s=a(1682),y=a(9466);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function g(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,s.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,c.W6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function p(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=g(e),[l,c]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[o,s]=m({queryString:a,groupId:n}),[d,p]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,y.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),h=(()=>{const e=o??d;return u({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&c(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),s(e),p(e)}),[s,p,i]),tabValues:i}}var h=a(2303);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:c,selectValue:o,tabValues:s}=e;const y=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),g=e=>{const t=e.currentTarget,a=y.indexOf(t),n=s[a].value;n!==c&&(d(t),o(n))},u=e=>{let t=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const a=y.indexOf(e.currentTarget)+1;t=y[a]??y[0];break}case"ArrowLeft":{const a=y.indexOf(e.currentTarget)-1;t=y[a]??y[y.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,key:t,ref:e=>y.push(e),onKeyDown:u,onClick:g},l,{className:(0,i.A)("tabs__item",N.tabItem,l?.className,{"tabs__item--active":c===t})}),a??t)})))}function b(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=p(e);return r.createElement("div",{className:(0,i.A)("tabs-container",N.tabList)},r.createElement(f,(0,n.A)({},e,t)),r.createElement(b,(0,n.A)({},e,t)))}function S(e){const t=(0,h.A)();return r.createElement(v,(0,n.A)({key:String(t)},e))}},1441:(e,t,a)=>{a(6540)},5347:(e,t,a)=>{a.d(t,{r:()=>c});var n=a(1470),r=a(9365),i=a(2355),l=a(6540);const c=e=>{let{js:t,python:a,java:c,kotlin:o,go:s,csharp:y,php:d,rust:g,ruby:u,elixir:m,swift:p,dart:h,cli:N}=e;return t||a||c||o||s||y||d||g||u||m||p||h||N?l.createElement(n.A,null,t&&l.createElement(r.A,{value:"js",label:"JavaScript"},l.createElement(i.A,{language:"js"},t)),a&&l.createElement(r.A,{value:"python",label:"Python"},l.createElement(i.A,{language:"python"},a)),c&&l.createElement(r.A,{value:"java",label:"Java"},l.createElement(i.A,{language:"java"},c)),o&&l.createElement(r.A,{value:"kotlin",label:"Kotlin"},l.createElement(i.A,{language:"kotlin"},o)),s&&l.createElement(r.A,{value:"go",label:"Go"},l.createElement(i.A,{language:"go"},s)),y&&l.createElement(r.A,{value:"csharp",label:"C#"},l.createElement(i.A,{language:"csharp"},y)),d&&l.createElement(r.A,{value:"php",label:"PHP"},l.createElement(i.A,{language:"php"},d)),g&&l.createElement(r.A,{value:"rust",label:"Rust"},l.createElement(i.A,{language:"rust"},g)),u&&l.createElement(r.A,{value:"ruby",label:"Ruby"},l.createElement(i.A,{language:"ruby"},u)),m&&l.createElement(r.A,{value:"elixir",label:"Elixir"},l.createElement(i.A,{language:"elixir"},m)),p&&l.createElement(r.A,{value:"swift",label:"Swift"},l.createElement(i.A,{language:"swift"},p)),h&&l.createElement(r.A,{value:"dart",label:"Dart"},l.createElement(i.A,{language:"dart"},h)),N&&l.createElement(r.A,{value:"cli",label:"CLI"},l.createElement(i.A,{language:"cli"},N))):null}},6056:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>y});var n=a(8168),r=(a(6540),a(5680)),i=(a(1441),a(5347));const l={sidebar_position:1,sidebar_label:"Dictionary",title:"Dictionary API reference",description:"Learn how to interact with the API for dictionary collection data types in Momento Cache."},c="Dictionary API reference for Momento Cache",o={unversionedId:"cache/develop/api-reference/dictionary-collections",id:"cache/develop/api-reference/dictionary-collections",title:"Dictionary API reference",description:"Learn how to interact with the API for dictionary collection data types in Momento Cache.",source:"@site/docs/cache/develop/api-reference/dictionary-collections.md",sourceDirName:"cache/develop/api-reference",slug:"/cache/develop/api-reference/dictionary-collections",permalink:"/cache/develop/api-reference/dictionary-collections",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/cache/develop/api-reference/dictionary-collections.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Dictionary",title:"Dictionary API reference",description:"Learn how to interact with the API for dictionary collection data types in Momento Cache."},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/cache/develop/api-reference/"},next:{title:"Lists",permalink:"/cache/develop/api-reference/list-collections"}},s={},y=[{value:"Dictionary methods",id:"dictionary-methods",level:2},{value:"DictionaryFetch",id:"dictionaryfetch",level:3},{value:"DictionaryGetField",id:"dictionarygetfield",level:3},{value:"DictionaryGetFields",id:"dictionarygetfields",level:3},{value:"DictionaryIncrement",id:"dictionaryincrement",level:3},{value:"DictionaryRemoveField",id:"dictionaryremovefield",level:3},{value:"DictionaryRemoveFields",id:"dictionaryremovefields",level:3},{value:"DictionarySetField",id:"dictionarysetfield",level:3},{value:"DictionarySetFields",id:"dictionarysetfields",level:3},{value:"DictionaryLength",id:"dictionarylength",level:3}],d={toc:y},g="wrapper";function u(e){let{components:t,...a}=e;return(0,r.yg)(g,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"dictionary-api-reference-for-momento-cache"},"Dictionary API reference for Momento Cache"),(0,r.yg)("p",null,"This page details the Momento API methods for the ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/basics/datatypes#dictionary-collections"},"dictionary collection data type"),"."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Momento collection types use a ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL"),' to specify their TTL behavior. This is an optional argument for all "write" operations.')),(0,r.yg)("h2",{id:"dictionary-methods"},"Dictionary methods"),(0,r.yg)("h3",{id:"dictionaryfetch"},"DictionaryFetch"),(0,r.yg)("p",null,"Gets a dictionary item from a cache."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the dictionary item to be retrieved.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("p",null,"The response object for DictionaryFetch returns three possible options, a cache hit, miss, or an error."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Cache hit",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"valueDictionaryBytesBytes()"),": Map<Bytes, Bytes>"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"valueDictionaryStringString()"),": Map<String, String>"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"valueDictionaryStringBytes()"),": Map<String, Bytes>"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"valueDictionaryBytesString()"),": Map<Bytes, String>"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toString()"),": String - displays the field/value pairs, truncated."))),(0,r.yg)("li",{parentName:"ul"},"Cache miss"),(0,r.yg)("li",{parentName:"ul"},"Cache error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', 'test-value');\nconst result = await cacheClient.dictionaryFetch(cacheName, 'test-dictionary');\nif (result instanceof CacheDictionaryFetch.Hit) {\n  console.log('Dictionary fetched successfully- ');\n  result.valueMapStringString().forEach((value, key) => {\n    console.log(`${key} : ${value}`);\n  });\n} else if (result instanceof CacheDictionaryFetch.Miss) {\n  console.log(`Dictionary 'test-dictionary' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheDictionaryFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionaryFetch on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  let response = cache_client\n      .dictionary_fetch(cache_name, "dictionary_name")\n      .await?;\n\n  match response {\n      DictionaryFetch::Hit { value } => {\n          let dictionary: HashMap<String, String> =\n              value.try_into().expect("I stored a dictionary!");\n          println!("Fetched dictionary: {:?}", dictionary);\n      }\n      DictionaryFetch::Miss => println!("Cache miss"),\n  }\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionarygetfield"},"DictionaryGetField"),(0,r.yg)("p",null,"Get one field from a dictionary item in the cache."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be retrieved.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"field"),(0,r.yg)("td",{parentName:"tr",align:null},"String/Bytes"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the field in the dictionary item to be retrieved.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Cache hit"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"fieldString()"),": String")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"fieldBytes()"),": Bytes")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"valueString()"),": String")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"valueBytes()"),": Bytes"),(0,r.yg)("p",{parentName:"li"},"  These return the field and its value from the dictionary.")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Cache miss"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fieldString()"),": String"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fieldBytes()"),": Bytes"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Cache error"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fieldString()"),": String"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fieldBytes()"),": Bytes")))),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', 'test-value');\nconst result = await cacheClient.dictionaryGetField(cacheName, 'test-dictionary', 'test-field');\nif (result instanceof CacheDictionaryGetField.Hit) {\n  console.log(\n    `Field ${result.fieldString()} fetched successfully from cache '${cacheName}' with value: ${result.valueString()}`\n  );\n} else if (result instanceof CacheDictionaryGetField.Miss) {\n  console.log(`Dictionary 'test-dictionary' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheDictionaryGetField.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionaryGetField on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  let response = cache_client\n      .dictionary_get_field(cache_name, "dictionary_name", "field")\n      .await?;\n\n  match response {\n      DictionaryGetField::Hit { value } => {\n          let value: String = value.try_into().expect("I stored a string!");\n          println!("Fetched value: {}", value);\n      }\n      DictionaryGetField::Miss => println!("Cache miss"),\n  }\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionarygetfields"},"DictionaryGetFields"),(0,r.yg)("p",null,"Get one or more fields from a dictionary in the cache."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be retrieved.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"fields"),(0,r.yg)("td",{parentName:"tr",align:null},"String[]/Bytes[]"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the field in the dictionary item to be retrieved.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Cache hit",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"valueDictionaryBytesBytes(): Map<Bytes, Bytes>"),(0,r.yg)("li",{parentName:"ul"},"valueDictionaryStringString(): Map<String, String>"),(0,r.yg)("li",{parentName:"ul"},"valueDictionaryStringBytes(): Map<String, Bytes>"),(0,r.yg)("li",{parentName:"ul"},"valueDictionaryBytesString(): Map<Bytes, String>"),(0,r.yg)("li",{parentName:"ul"},"toString(): String - displays truncated valueDictionaryStringString()"))),(0,r.yg)("li",{parentName:"ul"},"Cache miss"),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"await cacheClient.dictionarySetFields(\n  cacheName,\n  'test-dictionary',\n  new Map<string, string>([\n    ['key1', 'value1'],\n    ['key2', 'value2'],\n  ])\n);\nconst result = await cacheClient.dictionaryGetFields(cacheName, 'test-dictionary', ['key1', 'key2']);\nif (result instanceof CacheDictionaryGetFields.Hit) {\n  console.log('Values fetched successfully- ');\n  result.valueMapStringString().forEach((value, key) => {\n    console.log(`${key} : ${value}`);\n  });\n} else if (result instanceof CacheDictionaryGetFields.Miss) {\n  console.log(`Dictionary 'test-dictionary' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheDictionaryGetFields.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionaryGetFields on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  let response = cache_client\n      .dictionary_get_fields(cache_name, "dictionary_name", vec!["field1", "field2"])\n      .await?;\n\n  match response {\n      DictionaryGetFields::Hit { .. } => {\n          let dictionary: HashMap<String, String> = response\n              .try_into()\n              .expect("I stored a dictionary of strings!");\n          println!("Fetched dictionary: {:?}", dictionary);\n      }\n      DictionaryGetFields::Miss => println!("Cache miss"),\n  }\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionaryincrement"},"DictionaryIncrement"),(0,r.yg)("p",null,"Adds to the value of a field, if and only if the existing value is a UTF-8 string representing a base 10 integer. If the field is missing from the dictionary, this method sets the field's value to the amount to increment by."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"The resulting incremented value must be between -9223372036854775808 and 9223372036854775807, ie. a signed 64-bit integer. If not, there will be an error response.")),(0,r.yg)("p",null,"Examples:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"When the field does not exist, ",(0,r.yg)("inlineCode",{parentName:"li"},"dictionaryIncrement(cache, dict, field, 10)")," will set the field's value to 10."),(0,r.yg)("li",{parentName:"ul"},"When the field = 5, ",(0,r.yg)("inlineCode",{parentName:"li"},"dictionaryIncrement(cache, dict, field, 10)")," will set the field's value to 15."),(0,r.yg)("li",{parentName:"ul"},"When the field = \u2018five\u2019, it will respond with a FailedPreconditionException error.")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be retrieved.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"field"),(0,r.yg)("td",{parentName:"tr",align:null},"String/Bytes"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the field in the dictionary item to be retrieved.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"amount"),(0,r.yg)("td",{parentName:"tr",align:null},"Integer"),(0,r.yg)("td",{parentName:"tr",align:null},"The quantity to add to the value. May be positive, negative, or zero. Defaults to 1.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ttl"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL object")),(0,r.yg)("td",{parentName:"tr",align:null},"This will come back as a TTL construct.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Success",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"value()"),": integer - the new value after incrementing"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toString()"),": String - displays the value()"))),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', '10');\nconst result = await cacheClient.dictionaryIncrement(cacheName, 'test-dictionary', 'test-field', 1);\nif (result instanceof CacheDictionaryIncrement.Success) {\n  console.log(`Field value incremented by 1. Result - ${result.valueNumber()}`);\n} else if (result instanceof CacheDictionaryIncrement.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionaryIncrement on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  let response = cache_client\n      .dictionary_increment(cache_name, "dictionary_name", "field", 1)\n      .await?;\n  println!("Incremented field in dictionary to {}", response.value);\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionaryremovefield"},"DictionaryRemoveField"),(0,r.yg)("p",null,"Removes a field from a dictionary item."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be retrieved.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"field"),(0,r.yg)("td",{parentName:"tr",align:null},"String/Bytes"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the field in the dictionary item to be retrieved.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Success"),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', '10');\nconst result = await cacheClient.dictionaryRemoveField(cacheName, 'test-dictionary', 'test-field');\nif (result instanceof CacheDictionaryRemoveField.Success) {\n  console.log(\"Field removed successfully from dictionary 'test-dictionary'\");\n} else if (result instanceof CacheDictionaryRemoveField.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionaryRemoveField on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  cache_client\n      .dictionary_remove_field(cache_name, "dictionary_name", "field")\n      .await?;\n  println!("Field removed from dictionary");\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionaryremovefields"},"DictionaryRemoveFields"),(0,r.yg)("p",null,"Removes multiple fields from a dictionary item."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be retrieved.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"fields"),(0,r.yg)("td",{parentName:"tr",align:null},"String[]/Bytes[]"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the field in the dictionary item to be retrieved.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Success"),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"await cacheClient.dictionarySetFields(\n  cacheName,\n  'test-dictionary',\n  new Map<string, string>([\n    ['key1', 'value1'],\n    ['key2', 'value2'],\n  ])\n);\nconst result = await cacheClient.dictionaryRemoveFields(cacheName, 'test-dictionary', ['key1', 'key2']);\nif (result instanceof CacheDictionaryRemoveFields.Success) {\n  console.log(\"Fields removed successfully from dictionary 'test-dictionary'\");\n} else if (result instanceof CacheDictionaryRemoveFields.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionaryRemoveFields on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  cache_client\n      .dictionary_remove_fields(cache_name, "dictionary_name", vec!["field1", "field2"])\n      .await?;\n  println!("Fields removed from dictionary");\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionarysetfield"},"DictionarySetField"),(0,r.yg)("p",null,"Sets a field:value pair in an existing dictionary item. If the dictionary item does not exist, it is created with the new field:value pair."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be set.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"field"),(0,r.yg)("td",{parentName:"tr",align:null},"String/Bytes"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the field in the dictionary item to be set.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"value"),(0,r.yg)("td",{parentName:"tr",align:null},"String/Bytes"),(0,r.yg)("td",{parentName:"tr",align:null},"Value for the field to be set.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ttl"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL object")),(0,r.yg)("td",{parentName:"tr",align:null},"TTL for the dictionary item in cache. This TTL takes precedence over the TTL used when initializing a cache client.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Success"),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"const result = await cacheClient.dictionarySetField(cacheName, 'test-dictionary', 'test-field', 'test-value');\nif (result instanceof CacheDictionarySetField.Success) {\n  console.log(`Field set successfully into cache '${cacheName}'`);\n} else if (result instanceof CacheDictionarySetField.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionarySetField on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  cache_client\n      .dictionary_set_field(cache_name.to_string(), "dictionary_name", "field", "value")\n      .await?;\n  println!("Set field in dictionary");\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionarysetfields"},"DictionarySetFields"),(0,r.yg)("p",null,"Sets several field:value pairs in a dictionary item. If the dictionary item does not exist, it is created with the new fields."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be set.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"fields"),(0,r.yg)("td",{parentName:"tr",align:null},"String[]/Bytes[]"),(0,r.yg)("td",{parentName:"tr",align:null},"Field:value pair to be added to the dictionary item by the set operation.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ttl"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL object")),(0,r.yg)("td",{parentName:"tr",align:null},"TTL for the dictionary item in cache. This TTL takes precedence over the TTL used when initializing a cache client.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Success"),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"const result = await cacheClient.dictionarySetFields(\n  cacheName,\n  'test-dictionary',\n  new Map<string, string>([\n    ['key1', 'value1'],\n    ['key2', 'value2'],\n  ])\n);\nif (result instanceof CacheDictionarySetFields.Success) {\n  console.log(`Fields set successfully into cache '${cacheName}'`);\n} else if (result instanceof CacheDictionarySetFields.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheDictionarySetFields on dictionary 'test-dictionary' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  cache_client\n      .dictionary_set_fields(\n          cache_name.to_string(),\n          "dictionary_name",\n          vec![("field1", "value1"), ("field2", "value2")],\n      )\n      .await?;\n  println!("Set fields in dictionary");\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,r.yg)("h3",{id:"dictionarylength"},"DictionaryLength"),(0,r.yg)("p",null,"Get the length of an existing dictionary item"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"dictionaryName"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the dictionary item to be checked.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Method response object"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Hit",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"length()"),": Number"))),(0,r.yg)("li",{parentName:"ul"},"Miss"),(0,r.yg)("li",{parentName:"ul"},"Error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,r.yg)(i.r,{js:"",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client: &CacheClient,\n  cache_name: &String,\n-> Result<(), MomentoError> {\n  let _length: u32 = cache_client\n      .dictionary_length(cache_name, "dictionary_name")\n      .await?\n      .try_into()\n      .expect("Expected a dictionary length!");\n  Ok(())',ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))}u.isMDXComponent=!0}}]);
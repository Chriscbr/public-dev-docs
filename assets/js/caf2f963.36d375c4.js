"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[4181],{758:function(e,t,n){n.d(t,{A:function(){return k}});var a=n(7462),l=n(7294),c=n(2389),r=n(7392),i=n(7094),o=n(2466),u=n(6010),s="tabList_uSqn",h="tabItem_LplD";function m(e){var t,n,c,m=e.lazy,T=e.block,p=e.defaultValue,_=e.values,d=e.groupId,k=e.className,N=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),E=null!=_?_:N.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,r.l)(E,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var C=null===p?p:null!=(t=null!=p?p:null==(n=N.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(c=N[0])?void 0:c.props.value;if(null!==C&&!E.some((function(e){return e.value===C})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+E.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var S=(0,i.U)(),b=S.tabGroupChoices,g=S.setTabGroupChoices,f=(0,l.useState)(C),O=f[0],v=f[1],M=[],D=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var A=b[d];null!=A&&A!==O&&E.some((function(e){return e.value===A}))&&v(A)}var L=function(e){var t=e.currentTarget,n=M.indexOf(t),a=E[n].value;a!==O&&(D(t),v(a),null!=d&&g(d,a))},w=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=M.indexOf(e.currentTarget)+1;n=M[a]||M[0];break;case"ArrowLeft":var l=M.indexOf(e.currentTarget)-1;n=M[l]||M[M.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,u.Z)("tabs-container",s)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":T},k)},E.map((function(e){var t=e.value,n=e.label,c=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return M.push(e)},onKeyDown:w,onFocus:L,onClick:L},c,{className:(0,u.Z)("tabs__item",h,null==c?void 0:c.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),m?(0,l.cloneElement)(N.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},N.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function T(e){var t=(0,c.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}var p="tabItem_OmH5";function _(e){var t=e.children,n=e.hidden,a=e.className;return l.createElement("div",{role:"tabpanel",className:(0,u.Z)(p,a),hidden:n},t)}var d=n(5710),k=function(e){var t=e.js,n=e.python,a=e.java,c=e.go,r=e.csharp,i=e.rust,o=e.cli;return l.createElement(T,null,l.createElement(_,{value:"js",label:"JavaScript"},l.createElement(d.Z,{language:"js"},t)),l.createElement(_,{value:"python",label:"Python"},l.createElement(d.Z,{language:"python"},n)),l.createElement(_,{value:"java",label:"Java"},l.createElement(d.Z,{language:"java"},a)),l.createElement(_,{value:"go",label:"Go"},l.createElement(d.Z,{language:"go"},c)),l.createElement(_,{value:"csharp",label:"C#"},l.createElement(d.Z,{language:"csharp"},r)),l.createElement(_,{value:"rust",label:"Rust"},l.createElement(d.Z,{language:"rust"},i)),l.createElement(_,{value:"cli",label:"CLI"},l.createElement(d.Z,{language:"cli"},o)))}},9115:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var a=n(7462),l=n(3366),c=(n(7294),n(3905)),r=n(758),i=["components"],o={sidebar_position:4,sidebar_class_name:"sidebar-item-api-reference"},u="API Reference",s={unversionedId:"API-reference",id:"API-reference",title:"API Reference",description:"Control APIs",source:"@site/docs/4-API-reference.mdx",sourceDirName:".",slug:"/API-reference",permalink:"/docs/API-reference",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/4-API-reference.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_class_name:"sidebar-item-api-reference"},sidebar:"tutorialSidebar",previous:{title:"Caching Strategies and Patterns",permalink:"/docs/caching-concepts/caching-strategies-and-patterns"},next:{title:"Guides",permalink:"/docs/guides"}},h={},m=[{value:"Control APIs",id:"control-apis",level:2},{value:"Create Cache",id:"create-cache",level:3},{value:"Delete Cache",id:"delete-cache",level:3},{value:"List Caches",id:"list-caches",level:3},{value:"Data APIs",id:"data-apis",level:2},{value:"Set",id:"set",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3}],T={toc:m};function p(e){var t=e.components,n=(0,l.Z)(e,i);return(0,c.kt)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"api-reference"},"API Reference"),(0,c.kt)("h2",{id:"control-apis"},"Control APIs"),(0,c.kt)("h3",{id:"create-cache"},"Create Cache"),(0,c.kt)("p",null,"Creates a cache with provided name"),(0,c.kt)("p",null,"Attributes:"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Type"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,c.kt)("td",{parentName:"tr",align:null},"String"),(0,c.kt)("td",{parentName:"tr",align:null},"Name of the cache to be created.")))),(0,c.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 300;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.createCache('test-cache');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 300\n\nwith scc.init(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.create_cache('test-cache')\n",java:'\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nint DEFAULT_ITEM_TTL_SECONDS = 300;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.createCache("test-cache");\n    ',go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 300\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\nerr = client.CreateCache(&momento.CreateCacheRequest{\n    CacheName: "test-cache",\n})\n    ',csharp:'\nuint DEFAULT_TTL_SECONDS = 300;\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nusing SimpleCacheClient client = new SimpleCacheClient(MOMENTO_AUTH_TOKEN, DEFAULT_TTL_SECONDS);\nclient.CreateCache("test-cache");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 300;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("test-cache");\nmatch cache_client.create_cache(&cache_name).await {\n    Ok(_) => {}\n    Err(err) => {\n        eprintln!("{}", err);\n    }\n}\n',cli:"momento cache create --name test-cache",mdxType:"SdkExamples"}),(0,c.kt)("h3",{id:"delete-cache"},"Delete Cache"),(0,c.kt)("p",null,"Deletes a cache"),(0,c.kt)("p",null,"Attributes:"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Type"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,c.kt)("td",{parentName:"tr",align:null},"String"),(0,c.kt)("td",{parentName:"tr",align:null},"Name of the cache to be deleted.")))),(0,c.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 300;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.deleteCache('test-cache');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 300\n\nwith scc.init(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.delete_cache('test-cache')\n",java:'\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nint DEFAULT_ITEM_TTL_SECONDS = 300;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.deleteCache("test-cache");\n    ',go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 300\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\nerr = client.DeleteCache(&momento.CreateCacheRequest{\n    CacheName: "test-cache",\n})\n    ',csharp:'\nuint DEFAULT_TTL_SECONDS = 300;\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nusing SimpleCacheClient client = new SimpleCacheClient(MOMENTO_AUTH_TOKEN, DEFAULT_TTL_SECONDS);\nclient.DeleteCache("test-cache");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 300;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("test-cache");\nmatch cache_client.delete_cache(&cache_name).await {\n    Ok(_) => {}\n    Err(err) => {\n        eprintln!("{}", err);\n    }\n}\n',cli:"momento cache delete-cache --name test-cache",mdxType:"SdkExamples"}),(0,c.kt)("h3",{id:"list-caches"},"List Caches"),(0,c.kt)("p",null,"Lists all caches for the provided auth token."),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Type"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"nextToken"),(0,c.kt)("td",{parentName:"tr",align:null},"String"),(0,c.kt)("td",{parentName:"tr",align:null},"Token for pagination of caches.")))),(0,c.kt)("h2",{id:"data-apis"},"Data APIs"),(0,c.kt)("h3",{id:"set"},"Set"),(0,c.kt)("p",null,"Sets the value in cache with a given Time To Live (TTL) seconds. If a value for this key is already present it will be replaced by the new value."),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Type"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,c.kt)("td",{parentName:"tr",align:null},"String"),(0,c.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"key"),(0,c.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,c.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be added.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"value"),(0,c.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,c.kt)("td",{parentName:"tr",align:null},"The value to be stored.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"ttlSeconds"),(0,c.kt)("td",{parentName:"tr",align:null},"int"),(0,c.kt)("td",{parentName:"tr",align:null},"Time to Live for the item in Cache.")))),(0,c.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 300;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.set('test-cache', 'test-key', 'test-value');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 300\n\nwith scc.init(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.set('test-cache', 'test-key', 'test-value')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 300;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.set('test-cache', 'test-key', 'test-value');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 300\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Set(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n    Value:     "test-value",\n})\n    ',csharp:'\nuint DEFAULT_TTL_SECONDS = 300;\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nusing SimpleCacheClient client = new SimpleCacheClient(MOMENTO_AUTH_TOKEN, DEFAULT_TTL_SECONDS);\nclient.Set("test-cache", "test-key", "test-value");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 300;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .set(&cache_name, key.clone(), value.clone(), None)\n    .await\n    .unwrap();\n    ',cli:"momento cache set --key test-key --value test-value",mdxType:"SdkExamples"}),(0,c.kt)("h3",{id:"get"},"Get"),(0,c.kt)("p",null,"Get the cache value stored for the given key."),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Type"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,c.kt)("td",{parentName:"tr",align:null},"String"),(0,c.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"key"),(0,c.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,c.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be added.")))),(0,c.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 300;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.get('test-cache', 'test-key');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 300\n\nwith scc.init(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.get('test-cache', 'test-key')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 300;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.get('test-cache', 'test-key');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 300\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Get(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n})\n    ',csharp:'\nuint DEFAULT_TTL_SECONDS = 300;\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nusing SimpleCacheClient client = new SimpleCacheClient(MOMENTO_AUTH_TOKEN, DEFAULT_TTL_SECONDS);\nclient.Get("test-cache", "test-key");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 300;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .get(&cache_name, key.clone())\n    .await\n    .unwrap();\n    ',cli:"momento cache get --key test-key --value test-value",mdxType:"SdkExamples"}),(0,c.kt)("h3",{id:"delete"},"Delete"),(0,c.kt)("p",null,"Delete the cache value stored for the given key."),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Type"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,c.kt)("td",{parentName:"tr",align:null},"String"),(0,c.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"key"),(0,c.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,c.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be deleted.")))),(0,c.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 300;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.get('test-cache', 'test-key');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 300\n\nwith scc.init(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.delete('test-cache', 'test-key')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 300;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.delete('test-cache', 'test-key');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 300\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Delete(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n})\n    ',csharp:'\nuint DEFAULT_TTL_SECONDS = 300;\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nusing SimpleCacheClient client = new SimpleCacheClient(MOMENTO_AUTH_TOKEN, DEFAULT_TTL_SECONDS);\nclient.Delete("test-cache", "test-key");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 300;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .delete(&cache_name, key.clone())\n    .await\n    .unwrap();\n    ',cli:"momento cache delete --key test-key --value test-value",mdxType:"SdkExamples"}))}p.isMDXComponent=!0}}]);
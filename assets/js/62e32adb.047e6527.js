"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[3458],{9365:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(6540),a=n(53);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,o),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>v});var r=n(8168),a=n(6540),l=n(53),o=n(3104),s=n(6347),i=n(7485),c=n(1682),d=n(9466);function u(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=m(e),[o,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[i,c]=p({queryString:n,groupId:r}),[u,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,d.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),h=(()=>{const e=i??u;return g({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),y(e)}),[c,y,l]),tabValues:l}}var h=n(2303);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),r=c[n].value;r!==s&&(u(t),i(r))},g=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>d.push(e),onKeyDown:g,onClick:m},o,{className:(0,l.A)("tabs__item",N.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function S(e){const t=y(e);return a.createElement("div",{className:(0,l.A)("tabs-container",N.tabList)},a.createElement(f,(0,r.A)({},e,t)),a.createElement(b,(0,r.A)({},e,t)))}function v(e){const t=(0,h.A)();return a.createElement(S,(0,r.A)({key:String(t)},e))}},1441:(e,t,n)=>{n(6540)},5347:(e,t,n)=>{n.d(t,{r:()=>s});var r=n(1470),a=n(9365),l=n(2355),o=n(6540);const s=e=>{let{js:t,python:n,java:s,kotlin:i,go:c,csharp:d,php:u,rust:m,ruby:g,elixir:p,swift:y,dart:h,cli:N}=e;return t||n||s||i||c||d||u||m||g||p||y||h||N?o.createElement(r.A,null,t&&o.createElement(a.A,{value:"js",label:"JavaScript"},o.createElement(l.A,{language:"js"},t)),n&&o.createElement(a.A,{value:"python",label:"Python"},o.createElement(l.A,{language:"python"},n)),s&&o.createElement(a.A,{value:"java",label:"Java"},o.createElement(l.A,{language:"java"},s)),i&&o.createElement(a.A,{value:"kotlin",label:"Kotlin"},o.createElement(l.A,{language:"kotlin"},i)),c&&o.createElement(a.A,{value:"go",label:"Go"},o.createElement(l.A,{language:"go"},c)),d&&o.createElement(a.A,{value:"csharp",label:"C#"},o.createElement(l.A,{language:"csharp"},d)),u&&o.createElement(a.A,{value:"php",label:"PHP"},o.createElement(l.A,{language:"php"},u)),m&&o.createElement(a.A,{value:"rust",label:"Rust"},o.createElement(l.A,{language:"rust"},m)),g&&o.createElement(a.A,{value:"ruby",label:"Ruby"},o.createElement(l.A,{language:"ruby"},g)),p&&o.createElement(a.A,{value:"elixir",label:"Elixir"},o.createElement(l.A,{language:"elixir"},p)),y&&o.createElement(a.A,{value:"swift",label:"Swift"},o.createElement(l.A,{language:"swift"},y)),h&&o.createElement(a.A,{value:"dart",label:"Dart"},o.createElement(l.A,{language:"dart"},h)),N&&o.createElement(a.A,{value:"cli",label:"CLI"},o.createElement(l.A,{language:"cli"},N))):null}},5787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(8168),a=(n(6540),n(5680)),l=(n(1441),n(5347));const o={sidebar_position:4,sidebar_label:"Sorted sets",title:"Sorted set collections API reference",description:"Learn how to interact with the API for sorted set collection data types in Momento Cache."},s="Sorted set collections",i={unversionedId:"cache/develop/api-reference/sorted-set-collections",id:"cache/develop/api-reference/sorted-set-collections",title:"Sorted set collections API reference",description:"Learn how to interact with the API for sorted set collection data types in Momento Cache.",source:"@site/docs/cache/develop/api-reference/sorted-set-collections.md",sourceDirName:"cache/develop/api-reference",slug:"/cache/develop/api-reference/sorted-set-collections",permalink:"/cache/develop/api-reference/sorted-set-collections",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/cache/develop/api-reference/sorted-set-collections.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Sorted sets",title:"Sorted set collections API reference",description:"Learn how to interact with the API for sorted set collection data types in Momento Cache."},sidebar:"tutorialSidebar",previous:{title:"Sets",permalink:"/cache/develop/api-reference/set-collections"},next:{title:"Auth",permalink:"/cache/develop/api-reference/auth"}},c={},d=[{value:"Sorted set methods",id:"sorted-set-methods",level:2},{value:"SortedSetPutElement",id:"sortedsetputelement",level:3},{value:"SortedSetPutElements",id:"sortedsetputelements",level:3},{value:"SortedSetFetchByRank",id:"sortedsetfetchbyrank",level:3},{value:"SortedSetFetchByScore",id:"sortedsetfetchbyscore",level:3},{value:"SortedSetGetScore",id:"sortedsetgetscore",level:3},{value:"SortedSetGetScores",id:"sortedsetgetscores",level:3},{value:"SortedSetRemoveElement",id:"sortedsetremoveelement",level:3},{value:"SortedSetRemoveElements",id:"sortedsetremoveelements",level:3},{value:"SortedSetGetRank",id:"sortedsetgetrank",level:3},{value:"SortedSetIncrementScore",id:"sortedsetincrementscore",level:3},{value:"SortedSetElement",id:"sortedsetelement",level:2},{value:"SortedSetLength",id:"sortedsetlength",level:3},{value:"SortedSetLengthByScore",id:"sortedsetlengthbyscore",level:3}],u={toc:d},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"sorted-set-collections"},"Sorted set collections"),(0,a.yg)("p",null,"A sorted set in Momento Cache is a collection of unique elements with a value (String, Byte[], etc.) and score (signed double 64-bit float) pair. The elements in a sorted set are ordered by score."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Momento collection types use a ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL"),' to specify their TTL behavior. This is an optional argument for all "write" operations.')),(0,a.yg)("h2",{id:"sorted-set-methods"},"Sorted set methods"),(0,a.yg)("h3",{id:"sortedsetputelement"},"SortedSetPutElement"),(0,a.yg)("p",null,"Adds a new or updates an existing ",(0,a.yg)("a",{parentName:"p",href:"#sortedsetelement"},"sorted set element")," in a sorted set."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the set does not exist, this method creates a new sorted set collection with the element passed in.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the set exists, the element is added to the sorted set if that ",(0,a.yg)("strong",{parentName:"p"},"value")," doesn't exist. If the value of that element does exist, that element is overwritten."))),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection to be altered.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"value"),(0,a.yg)("td",{parentName:"tr",align:null},"String ","|"," Byte[]"),(0,a.yg)("td",{parentName:"tr",align:null},"The value of the element to be added to the sorted set by this operation.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"score"),(0,a.yg)("td",{parentName:"tr",align:null},"number"),(0,a.yg)("td",{parentName:"tr",align:null},"The score of the element to be added to the sorted set by this operation.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"ttl"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL object")),(0,a.yg)("td",{parentName:"tr",align:null},"TTL for the sorted set collection. This TTL takes precedence over the TTL used when initializing a cache connection client.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Success"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"const result = await cacheClient.sortedSetPutElement(cacheName, 'test-sorted-set', 'test-value', 5);\nif (result instanceof CacheSortedSetPutElement.Success) {\n  console.log(\"Value 'test-value' with score '5' added successfully to sorted set 'test-sorted-set'\");\n} else if (result instanceof CacheSortedSetPutElement.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetPutElement on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"case Momento.CacheClient.sorted_set_put_element(\n       client,\n       \"test-cache\",\n       \"test-sorted-set\",\n       \"test-value\",\n       5.0\n     ) do\n  {:ok, _} ->\n    IO.puts(\n      \"Value 'test-value' with score '5' added successfully to sorted set 'test-sorted-set'\"\n    )\n\n  {:error, error} ->\n    IO.puts(\n      \"An error occurred while attempting to put an element into sorted set 'test-sorted-set' in cache 'test-cache': #{error.error_code}\"\n    )\n\n    raise error\nend",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetputelements"},"SortedSetPutElements"),(0,a.yg)("p",null,"Adds new or updates existing ",(0,a.yg)("a",{parentName:"p",href:"#sortedsetelement"},"sorted set elements")," in a sorted set collection."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the set does not exist, this method creates a new sorted set collection with the element(s) passed in.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the set exists, for each ",(0,a.yg)("a",{parentName:"p",href:"#sortedsetelement"},"SortedSetElement")," in the array, each element is added to the sorted set if that ",(0,a.yg)("strong",{parentName:"p"},"value")," doesn't exist. If the value of that element does exist, that element is overwritten."))),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection to be altered.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"elements"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#sortedsetelement"},"SortedSetElement"),"[]"),(0,a.yg)("td",{parentName:"tr",align:null},"Elements to be added to the sorted set by this operation.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"ttl"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL object")),(0,a.yg)("td",{parentName:"tr",align:null},"TTL for the sorted set collection. This TTL takes precedence over the TTL used when initializing a cache connection client.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Success"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"const result = await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nif (result instanceof CacheSortedSetPutElements.Success) {\n  console.log(\"Elements added successfully to sorted set 'test-sorted-set'\");\n} else if (result instanceof CacheSortedSetPutElements.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetPutElements on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'case Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n       {"key1", 10.0},\n       {"key2", 20.0}\n     ]) do\n  {:ok, _} ->\n    IO.puts("Elements added successfully to sorted set \'test-sorted-set\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to put elements into sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetfetchbyrank"},"SortedSetFetchByRank"),(0,a.yg)("p",null,"Fetch elements of sorted set, optionally filtered by rank, and return them in ascending or descending order."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"startRank"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[integer]"),(0,a.yg)("td",{parentName:"tr",align:null},"The inclusive start rank of the results. Default is zero.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"endRank"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[integer]"),(0,a.yg)("td",{parentName:"tr",align:null},"The exclusive end rank of the results. Default is ",(0,a.yg)("inlineCode",{parentName:"td"},"null"),", ie up to and including the element ranked last.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"order"),(0,a.yg)("td",{parentName:"tr",align:null},"Ascending ","|"," Descending"),(0,a.yg)("td",{parentName:"tr",align:null},"The order you want the sorted set returned.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"elements(): SortedSetElement[]"))),(0,a.yg)("li",{parentName:"ul"},"Miss"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetFetchByRank(cacheName, 'test-sorted-set');\nif (result instanceof CacheSortedSetFetch.Hit) {\n  console.log(\"Values from sorted set 'test-sorted-set' fetched by rank successfully- \");\n  result.valueArray().forEach(res => {\n    console.log(`${res.value} : ${res.score}`);\n  });\n} else if (result instanceof CacheSortedSetFetch.Miss) {\n  console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheSortedSetFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetFetchByRank on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_fetch_by_rank(client, "test-cache", "test-sorted-set") do\n  {:ok, hit} ->\n    IO.puts("Values from sorted set \'test-sorted-set\' fetched by rank successfully:")\n    IO.inspect(hit.value)\n\n  :miss ->\n    IO.puts("Sorted Set \'test-sorted-set\' was not found in cache \'test-cache\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to fetch by rank on sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetfetchbyscore"},"SortedSetFetchByScore"),(0,a.yg)("p",null,"Fetch elements of sorted set, optionally filtered by score, and return them in ascending or descending order."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"minScore"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[double]"),(0,a.yg)("td",{parentName:"tr",align:null},"The inclusive low score of the results. Default is ",(0,a.yg)("inlineCode",{parentName:"td"},"-inf"),", ie include through the lowest score.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"maxScore"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[double]"),(0,a.yg)("td",{parentName:"tr",align:null},"The inclusive high score of the results. Default is ",(0,a.yg)("inlineCode",{parentName:"td"},"+inf"),", ie include through the highest score.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"order"),(0,a.yg)("td",{parentName:"tr",align:null},"Ascending ","|"," Descending"),(0,a.yg)("td",{parentName:"tr",align:null},"The order you want the sorted set returned.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"offset"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[int]"),(0,a.yg)("td",{parentName:"tr",align:null},"The offset, inclusive, into the filtered list from which to start returning results. Default is 0, ie do not filter. If specified, must be non-negative.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"count"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[int]"),(0,a.yg)("td",{parentName:"tr",align:null},"The maximum number of results from the filtered list to return. Default is ",(0,a.yg)("inlineCode",{parentName:"td"},"null"),", ie no limit. If specified, must be strictly positive.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"elements(): SortedSetElement[]"))),(0,a.yg)("li",{parentName:"ul"},"Miss"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 100],\n    ['key2', 25],\n  ])\n);\nconst result = await cacheClient.sortedSetFetchByScore(cacheName, 'test-sorted-set');\nif (result instanceof CacheSortedSetFetch.Hit) {\n  console.log(\"Values from sorted set 'test-sorted-set' fetched by score successfully- \");\n  result.valueArray().forEach(res => {\n    console.log(`${res.value} : ${res.score}`);\n  });\n} else if (result instanceof CacheSortedSetFetch.Miss) {\n  console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheSortedSetFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetFetchByScore on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_fetch_by_score(client, "test-cache", "test-sorted-set") do\n  {:ok, hit} ->\n    IO.puts("Values from sorted set \'test-sorted-set\' fetched by score successfully:")\n    IO.inspect(hit.value)\n\n  :miss ->\n    IO.puts("Sorted Set \'test-sorted-set\' was not found in cache \'test-cache\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to fetch by score on sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetgetscore"},"SortedSetGetScore"),(0,a.yg)("p",null,"Gets an element's score from the sorted set, indexed by value."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"value"),(0,a.yg)("td",{parentName:"tr",align:null},"String ","|"," Bytes"),(0,a.yg)("td",{parentName:"tr",align:null},"The value to get the score of.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Cache hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Score: number"))),(0,a.yg)("li",{parentName:"ul"},"Cache miss (if the sorted set does not exist)"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetGetScore(cacheName, 'test-sorted-set', 'key1');\nif (result instanceof CacheSortedSetGetScore.Hit) {\n  console.log(`Element with value 'key1' has score: ${result.score()}`);\n} else if (result instanceof CacheSortedSetGetScore.Miss) {\n  console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheSortedSetGetScore.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetFetchGetScore on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_get_score(client, "test-cache", "test-sorted-set", "key1") do\n  {:ok, hit} ->\n    IO.puts("Element with value \'key1\' has score: #{hit.score}")\n\n  :miss ->\n    IO.puts(\n      "Value \'key1\' not found in sorted set, or sorted set \'test-sorted-set\' was not found in cache \'test-cache\'"\n    )\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to get the score of \'key1\' in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetgetscores"},"SortedSetGetScores"),(0,a.yg)("p",null,"Gets the scores associated with a list of elements from the sorted set, indexed by value."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"values"),(0,a.yg)("td",{parentName:"tr",align:null},"String[] ","|"," Bytes[]"),(0,a.yg)("td",{parentName:"tr",align:null},"An array of values to get the score of.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Cache hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Elements() (returns hit/miss per element)",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Hit:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Score: number"))),(0,a.yg)("li",{parentName:"ul"},"Miss"))))),(0,a.yg)("li",{parentName:"ul"},"Cache miss (if the sorted set does not exist)"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetGetScores(cacheName, 'test-sorted-set', ['key1', 'key2']);\nif (result instanceof CacheSortedSetGetScores.Hit) {\n  console.log('Element scores retrieved successfully -');\n  result.valueMap().forEach((value, key) => {\n    console.log(`${key} : ${value}`);\n  });\n} else if (result instanceof CacheSortedSetGetScores.Miss) {\n  console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheSortedSetGetScores.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetFetchGetScores on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_get_scores(client, "test-cache", "test-sorted-set", [\n       "key1",\n       "key2"\n     ]) do\n  {:ok, hit} ->\n    IO.puts("Element scores retrieved successfully:")\n    IO.inspect(hit.value)\n\n  :miss ->\n    IO.puts("Sorted Set \'test-sorted-set\' was not found in cache \'test-cache\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to get the scores of values in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetremoveelement"},"SortedSetRemoveElement"),(0,a.yg)("p",null,"Removes an element from a sorted set, indexed by value."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the set collection to be altered.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"value"),(0,a.yg)("td",{parentName:"tr",align:null},"String ","|"," Bytes"),(0,a.yg)("td",{parentName:"tr",align:null},"Value of the element to be removed by this operation.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Success"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElement(cacheName, 'test-sorted-set', 'test-value', 10);\nconst result = await cacheClient.sortedSetRemoveElement(cacheName, 'test-sorted-set', 'test-value');\nif (result instanceof CacheSortedSetRemoveElement.Success) {\n  console.log(\"Element with value 'test-value' removed successfully\");\n} else if (result instanceof CacheSortedSetRemoveElement.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetRemoveElement on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_element(\n    client,\n    "test-cache",\n    "test-sorted-set",\n    "key1",\n    10.0\n  )\n\ncase Momento.CacheClient.sorted_set_remove_element(\n       client,\n       "test-cache",\n       "test-sorted-set",\n       "key1"\n     ) do\n  {:ok, _} ->\n    IO.puts("Element with value \'key1\' removed successfully")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to remove value \'key1\' from sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetremoveelements"},"SortedSetRemoveElements"),(0,a.yg)("p",null,"Removes elements from a sorted set, indexed by values."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the set collection to be altered.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"values"),(0,a.yg)("td",{parentName:"tr",align:null},"String[] ","|"," Bytes[]"),(0,a.yg)("td",{parentName:"tr",align:null},"Values of the elements to be removed by this operation.")))),(0,a.yg)("p",null,"You can remove either one or a specific group of elements."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Success"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetRemoveElements(cacheName, 'test-sorted-set', ['key1', 'key2']);\nif (result instanceof CacheSortedSetRemoveElements.Success) {\n  console.log(\"Elements with value 'key1' and 'key2 removed successfully\");\n} else if (result instanceof CacheSortedSetRemoveElements.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetRemoveElements on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_remove_elements(client, "test-cache", "test-sorted-set", [\n       "key1",\n       "key2"\n     ]) do\n  {:ok, _} ->\n    IO.puts("Elements with value \'key1\' and \'key2\' removed successfully")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting remove values from sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetgetrank"},"SortedSetGetRank"),(0,a.yg)("p",null,"What position is the element, in the specified sorted set?"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection to be altered.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"value"),(0,a.yg)("td",{parentName:"tr",align:null},"String ","|"," Bytes"),(0,a.yg)("td",{parentName:"tr",align:null},"Value of the element to retrieve the score of.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Rank: integer"))),(0,a.yg)("li",{parentName:"ul"},"Miss"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n    ['key3', 30],\n  ])\n);\nconst result = await cacheClient.sortedSetGetRank(cacheName, 'test-sorted-set', 'key2');\nif (result instanceof CacheSortedSetGetRank.Hit) {\n  console.log(`Element with value 'key1' has rank: ${result.rank()}`);\n} else if (result instanceof CacheSortedSetGetRank.Miss) {\n  console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n} else if (result instanceof CacheSortedSetGetRank.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetFetchGetRank on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_get_rank(client, "test-cache", "test-sorted-set", "key1") do\n  {:ok, hit} ->\n    IO.puts("Element with value \'key1\' has rank: #{hit.rank}")\n\n  :miss ->\n    IO.puts(\n      "Value \'key1\' not found in sorted set, or sorted set \'test-sorted-set\' was not found in cache \'test-cache\'"\n    )\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to get the rank of \'key1\' in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetincrementscore"},"SortedSetIncrementScore"),(0,a.yg)("p",null,"Adds to the score of an element. If the value is ",(0,a.yg)("em",{parentName:"p"},"missing")," from the sorted set, this method sets the value to the amount to increment by."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"The resulting incremented score must be between -9223372036854775808 and 9223372036854775807, ie. a signed double 64-bit float. If not, there will be an error response.")),(0,a.yg)("p",null,"Examples:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When the element does not exist in the sorted set, ",(0,a.yg)("inlineCode",{parentName:"li"},"SortedSetIncrementScore(cacheName, setName, value, 10)")," will set the element's score to 10."),(0,a.yg)("li",{parentName:"ul"},"When the existing element is a value:score of \"{ 'KesselRun' : 12 }\" , ",(0,a.yg)("inlineCode",{parentName:"li"},"SortedSetIncrementScore(cacheName, setName, value, 10)")," will set the element's score to 22.")),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection to be altered.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"value"),(0,a.yg)("td",{parentName:"tr",align:null},"String ","|"," Bytes"),(0,a.yg)("td",{parentName:"tr",align:null},"Value for the element to be incremented by this operation.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"amount"),(0,a.yg)("td",{parentName:"tr",align:null},"Number"),(0,a.yg)("td",{parentName:"tr",align:null},"The quantity to add to the score. May be positive, negative, or zero. Defaults to 1.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"ttl"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/cache/develop/api-reference/collection-ttl"},"CollectionTTL object")),(0,a.yg)("td",{parentName:"tr",align:null},"TTL for the sorted set collection. This TTL takes precedence over the TTL used when initializing a cache connection client.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Success",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Value: number - the new value after incrementing"))),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"await cacheClient.sortedSetPutElement(cacheName, 'test-sorted-set', 'test-value', 10);\nconst result = await cacheClient.sortedSetIncrementScore(cacheName, 'test-sorted-set', 'test-value', 1);\nif (result instanceof CacheSortedSetIncrementScore.Success) {\n  console.log(`Score for value 'test-value' incremented successfully. New score - ${result.score()}`);\n} else if (result instanceof CacheSortedSetIncrementScore.Error) {\n  throw new Error(\n    `An error occurred while attempting to call cacheSortedSetIncrementScore on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:'case Momento.CacheClient.sorted_set_increment_score(\n       client,\n       "test-cache",\n       "test-sorted-set",\n       "key1",\n       1\n     ) do\n  {:ok, result} ->\n    IO.puts("Score for value \'key1\' incremented successfully. New score: #{result.score}")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to increment the score of \'key1\' in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h2",{id:"sortedsetelement"},"SortedSetElement"),(0,a.yg)("p",null,"A value and score makes up each element in a sorted set."),(0,a.yg)("p",null,"Example:\n",(0,a.yg)("inlineCode",{parentName:"p"},'{ "TomHocusXaster" : 1138 }')),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Value"),(0,a.yg)("td",{parentName:"tr",align:null},"String ","|"," Bytes"),(0,a.yg)("td",{parentName:"tr",align:null},"Value for the sorted set element.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Score"),(0,a.yg)("td",{parentName:"tr",align:null},"Signed double 64-bit float"),(0,a.yg)("td",{parentName:"tr",align:null},"Score the element.")))),(0,a.yg)("p",null,"A SortedSetElement can exist by itself or as part of an array of SortedSetElements."),(0,a.yg)("h3",{id:"sortedsetlength"},"SortedSetLength"),(0,a.yg)("p",null,"Get the number of entries in a sorted set collection."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"sortedSetName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection to be checked.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"length()"),": Number"))),(0,a.yg)("li",{parentName:"ul"},"Miss"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}),(0,a.yg)("h3",{id:"sortedsetlengthbyscore"},"SortedSetLengthByScore"),(0,a.yg)("p",null,"For an existing sorted set collection, it finds all of the values between the specified min and max score and returns the length."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cacheName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"sortedSetName"),(0,a.yg)("td",{parentName:"tr",align:null},"String"),(0,a.yg)("td",{parentName:"tr",align:null},"Name of the sorted set collection to be checked.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"minScore"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[double]"),(0,a.yg)("td",{parentName:"tr",align:null},"The inclusive low score of the results. Default is ",(0,a.yg)("inlineCode",{parentName:"td"},"-inf"),", ie include through the lowest score.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"maxScore"),(0,a.yg)("td",{parentName:"tr",align:null},"Optional","[double]"),(0,a.yg)("td",{parentName:"tr",align:null},"The inclusive high score of the results. Default is ",(0,a.yg)("inlineCode",{parentName:"td"},"+inf"),", ie include through the highest score.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Method response object"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Hit",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"length()"),": Number"))),(0,a.yg)("li",{parentName:"ul"},"Miss"),(0,a.yg)("li",{parentName:"ul"},"Error")),(0,a.yg)("p",null,"See ",(0,a.yg)("a",{parentName:"p",href:"/cache/develop/api-reference/response-objects"},"response objects")," for specific information.")),(0,a.yg)(l.r,{js:"",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",ruby:"",elixir:"",swift:"",dart:"",cli:"",mdxType:"SdkExampleTabsImpl"}))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[9651],{3043:(e,n,t)=>{t(7294)},7235:(e,n,t)=>{t.d(n,{Z:()=>a});var o=t(614),r=t(7294);const a=e=>{let{language:n,code:t}=e;return r.createElement(o.Z,{language:n},t)}},8866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=t(7462),r=(t(7294),t(3905)),a=(t(3043),t(7235));const i={sidebar_position:1,sidebar_label:"Config and Error Handling",title:"Information about Momento Asynchronous APIs, Configuration and Error Handling in Rust",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in Rust",keywords:["momento","cache","configuration","error handling","exceptions","sdk","production ready","rust"]},s="Asynchronous APIs, Configuration, Error Handling, and Result Types in the Momento Rust SDK",l={unversionedId:"sdks/rust/config-and-error-handling",id:"sdks/rust/config-and-error-handling",title:"Information about Momento Asynchronous APIs, Configuration and Error Handling in Rust",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in Rust",source:"@site/docs/sdks/rust/config-and-error-handling.mdx",sourceDirName:"sdks/rust",slug:"/sdks/rust/config-and-error-handling",permalink:"/ja/sdks/rust/config-and-error-handling",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/sdks/rust/config-and-error-handling.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Config and Error Handling",title:"Information about Momento Asynchronous APIs, Configuration and Error Handling in Rust",description:"Learn how to configure your Momento CacheClient and write production-ready error handling code in Rust",keywords:["momento","cache","configuration","error handling","exceptions","sdk","production ready","rust"]}},d={},u=[{value:"Asynchronous APIs",id:"asynchronous-apis",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Credential Providers",id:"credential-providers",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Enum Response Types, Type Coercion via <code>into</code> and <code>try_into</code>",id:"enum-response-types-type-coercion-via-into-and-try_into",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"asynchronous-apis-configuration-error-handling-and-result-types-in-the-momento-rust-sdk"},"Asynchronous APIs, Configuration, Error Handling, and Result Types in the Momento Rust SDK"),(0,r.kt)("h2",{id:"asynchronous-apis"},"Asynchronous APIs"),(0,r.kt)("p",null,"All APIs in the SDK are asynchronous and return ",(0,r.kt)("inlineCode",{parentName:"p"},"Future"),"s. This means that you will need to use an\nasync runtime; we recommend ",(0,r.kt)("a",{parentName:"p",href:"https://tokio.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"tokio")),". Examples that include this dependency\nand illustrate the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"#[tokio::main]")," can be found in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/momentohq/client-sdk-rust/tree/main/example"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"example")," directory of the github repo"),"."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"Pre-built configurations are provided, with settings such as timeouts and keep-alives tuned\nto appropriate values for different environments. For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"momento::cache::configurations::Laptop::latest()")," - suitable for a development environment with lenient timeout\ns"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"momento::cache::configurations::InRegion::latest()")," - suitable for a production configuration with more strict\ntimeouts.")),(0,r.kt)("p",null,"These configurations can be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheClient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TopicClient")," builders.\nFor advanced use cases you can build your own configurations rather than using the pre-builts."),(0,r.kt)("h2",{id:"credential-providers"},"Credential Providers"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CredentialProvider")," struct is used to provide the API key for the Momento service. The two\nmost common factory functions for creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"CredentialProvider")," are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CredentialProvider::from_env_var")," - reads the API key from an environment variable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CredentialProvider::from_string")," - takes the API key as a string; can be used when retrieving the key from a se\ncret manager, etc.")),(0,r.kt)("h2",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"Most APIs return a ",(0,r.kt)("inlineCode",{parentName:"p"},"MomentoResult"),", which is just a type alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"Result<T, MomentoError>"),". You\ncan use a ",(0,r.kt)("inlineCode",{parentName:"p"},"match")," statement to handle the ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," operator to propagate errors."),(0,r.kt)("h2",{id:"enum-response-types-type-coercion-via-into-and-try_into"},"Enum Response Types, Type Coercion via ",(0,r.kt)("inlineCode",{parentName:"h2"},"into")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"try_into")),(0,r.kt)("p",null,"Many APIs may have more than one type of response that they can return. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheClient::get"),"\nmay return a cache hit or a cache miss. These response are represented as enums, which you can\ninteract with via a ",(0,r.kt)("inlineCode",{parentName:"p"},"match")," statement, or you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"try_into")," to try to directly coerce the response\ninto your desired type."),(0,r.kt)("p",null,"All Momento cache values are stored as ",(0,r.kt)("inlineCode",{parentName:"p"},"vec<u8>"),", but if you are using UTF-8 strings, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"try_into"),"\nfor these coercions as well."),(0,r.kt)("p",null,"Here are a few examples of how you can interact with a ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheClient::get")," response:"),(0,r.kt)("p",null,"Using a ",(0,r.kt)("inlineCode",{parentName:"p"},"match"),":"),(0,r.kt)(a.Z,{language:"rust",code:'  let _item: String = match cache_client.get(cache_name, "key").await? {\n      Get::Hit { value } => value.try_into()?,\n      Get::Miss => return Err(anyhow::Error::msg("cache miss"))\n  };',mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("p",null,"Or directly via ",(0,r.kt)("inlineCode",{parentName:"p"},"try_into"),":"),(0,r.kt)(a.Z,{language:"rust",code:'  let _item: String = cache_client.get(cache_name, "key").await?.try_into()?;',mdxType:"SdkExampleCodeBlockImpl"}),(0,r.kt)("p",null,"If you are using Momento collection data types, such as lists and dictionaries, we support\n",(0,r.kt)("inlineCode",{parentName:"p"},"into")," for the main Rust types that you would expect to be able to use to represent these. For\nexample, for Momento dictionaries:"),(0,r.kt)(a.Z,{language:"rust",code:'  let _item: HashMap<String, String> = cache_client\n      .dictionary_fetch(cache_name, "dictionary_key")\n      .await?\n      .try_into()?;',mdxType:"SdkExampleCodeBlockImpl"}))}p.isMDXComponent=!0}}]);
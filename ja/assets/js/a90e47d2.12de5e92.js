"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[102],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(6010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),l=n(7294),r=n(6010),i=n(2389),c=n(7392),o=n(7094),s=n(2466);const m="tabList__CuJ",u="tabItem_LNqP";function p(e){var t;const{lazy:n,block:i,defaultValue:p,values:d,groupId:h,className:k}=e,N=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),T=d??N.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,c.l)(T,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=N.find((e=>e.props.default)))?void 0:t.props.value)??N[0].props.value;if(null!==y&&!T.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${T.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:_,setTabGroupChoices:b}=(0,o.U)(),[S,v]=(0,l.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:f}=(0,s.o5)();if(null!=h){const e=_[h];null!=e&&e!==S&&T.some((t=>t.value===e))&&v(e)}const E=e=>{const t=e.currentTarget,n=C.indexOf(t),a=T[n].value;a!==S&&(f(t),v(a),null!=h&&b(h,String(a)))},M=e=>{var t;let n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;n=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;n=C[t]??C[C.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",m)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},k)},T.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>C.push(e),onKeyDown:M,onClick:E},i,{className:(0,r.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":S===t})}),n??t)}))),n?(0,l.cloneElement)(N.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},N.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function d(e){const t=(0,i.Z)();return l.createElement(p,(0,a.Z)({key:String(t)},e))}},7057:(e,t,n)=>{n.d(t,{A:()=>c});var a=n(5488),l=n(5162),r=n(814),i=n(7294);const c=e=>{let{js:t,python:n,java:c,go:o,csharp:s,rust:m,ruby:u,cli:p}=e;return i.createElement(a.Z,null,i.createElement(l.Z,{value:"js",label:"JavaScript"},i.createElement(r.Z,{language:"js"},t)),i.createElement(l.Z,{value:"python",label:"Python"},i.createElement(r.Z,{language:"python"},n)),i.createElement(l.Z,{value:"java",label:"Java"},i.createElement(r.Z,{language:"java"},c)),i.createElement(l.Z,{value:"go",label:"Go"},i.createElement(r.Z,{language:"go"},o)),i.createElement(l.Z,{value:"csharp",label:"C#"},i.createElement(r.Z,{language:"csharp"},s)),i.createElement(l.Z,{value:"rust",label:"Rust"},i.createElement(r.Z,{language:"rust"},m)),i.createElement(l.Z,{value:"ruby",label:"Ruby"},i.createElement(r.Z,{language:"ruby"},u)),i.createElement(l.Z,{value:"cli",label:"CLI"},i.createElement(r.Z,{language:"cli"},p)))}},675:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=n(7462),l=(n(7294),n(3905)),r=n(7057);const i={sidebar_position:5,title:"API reference information",pagination_prev:null,sidebar_label:"API reference",description:"Learn the API calls you need to know and how to use them with Momento Serverless Cache."},c="API reference for Momento Serverless Cache",o={unversionedId:"develop/api-reference/index",id:"develop/api-reference/index",title:"API reference information",description:"Learn the API calls you need to know and how to use them with Momento Serverless Cache.",source:"@site/docs/develop/api-reference/index.mdx",sourceDirName:"develop/api-reference",slug:"/develop/api-reference/",permalink:"/ja/develop/api-reference/",draft:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/develop/api-reference/index.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"API reference information",pagination_prev:null,sidebar_label:"API reference",description:"Learn the API calls you need to know and how to use them with Momento Serverless Cache."},sidebar:"tutorialSidebar",next:{title:"Dictionary",permalink:"/ja/develop/api-reference/collections/dictionary"}},s={},m=[{value:"Control APIs",id:"control-apis",level:2},{value:"Create cache",id:"create-cache",level:3},{value:"Delete cache",id:"delete-cache",level:3},{value:"List caches",id:"list-caches",level:3},{value:"Flush cache",id:"flush-cache",level:3},{value:"Data APIs",id:"data-apis",level:2},{value:"Set",id:"set",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3},{value:"Increment",id:"increment",level:3},{value:"Ping",id:"ping",level:3},{value:"KeyExists",id:"keyexists",level:3},{value:"KeysExist",id:"keysexist",level:3},{value:"SetIfNotExists",id:"setifnotexists",level:3},{value:"Time to Live APIs",id:"time-to-live-apis",level:2},{value:"UpdateTtl",id:"updatettl",level:3},{value:"IncreaseTtl",id:"increasettl",level:3},{value:"DecreaseTtl",id:"decreasettl",level:3},{value:"Collection data types (CDTs)",id:"collection-data-types-cdts",level:3},{value:"Current status of API support in SDKs",id:"current-status-of-api-support-in-sdks",level:2}],u={toc:m};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference-for-momento-serverless-cache"},"API reference for Momento Serverless Cache"),(0,l.kt)("h2",{id:"control-apis"},"Control APIs"),(0,l.kt)("p",null,"These API methods are used to manage and control caches."),(0,l.kt)("h3",{id:"create-cache"},"Create cache"),(0,l.kt)("p",null,"Creates a cache with the provided name"),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache to be created.")))),(0,l.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.createCache('test-cache');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.create_cache('test-cache')\n",java:'\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.createCache("test-cache");\n    ',go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\nerr = client.CreateCache(&momento.CreateCacheRequest{\n    CacheName: "test-cache",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.CreateCacheAsync("test-cache");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("test-cache");\nmatch cache_client.create_cache(&cache_name).await {\n    Ok(_) => {}\n    Err(err) => {\n        eprintln!("{}", err);\n    }\n}\n',ruby:"\nrequire 'momento'\nMOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\nDEFAULT_TTL_SECONDS = 15\nclient = Momento::SimpleCacheClient.new(\n  auth_token: MOMENTO_AUTH_TOKEN, default_ttl: DEFAULT_TTL_SECONDS\n)\nresponse = client.create_cache('test-cache')\nraise repsonse.error if response.error?\n  ",cli:"momento cache create --name test-cache",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"delete-cache"},"Delete cache"),(0,l.kt)("p",null,"Deletes a cache"),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache to be deleted.")))),(0,l.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.deleteCache('test-cache');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.delete_cache('test-cache')\n",java:'\nString MOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.deleteCache("test-cache");\n    ',go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\nerr = client.DeleteCache(&momento.CreateCacheRequest{\n    CacheName: "test-cache",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.DeleteCacheAsync("test-cache");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("test-cache");\nmatch cache_client.delete_cache(&cache_name).await {\n    Ok(_) => {}\n    Err(err) => {\n        eprintln!("{}", err);\n    }\n}\n',ruby:"\nrequire 'momento'\nMOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\nDEFAULT_TTL_SECONDS = 15\nclient = Momento::SimpleCacheClient.new(\n  auth_token: MOMENTO_AUTH_TOKEN, default_ttl: DEFAULT_TTL_SECONDS\n)\nresponse = client.delete_cache('test-cache')\nraise repsonse.error if response.error?\n  ",cli:"momento cache delete-cache --name test-cache",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"list-caches"},"List caches"),(0,l.kt)("p",null,"Lists all caches for the provided auth token."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nextToken"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Token for pagination of caches.")))),(0,l.kt)(r.A,{ruby:'\nrequire \'momento\'\nMOMENTO_AUTH_TOKEN = "eyJhbGc.MyTestToken"\nDEFAULT_TTL_SECONDS = 15\nclient = Momento::SimpleCacheClient.new(\n  auth_token: MOMENTO_AUTH_TOKEN, default_ttl: DEFAULT_TTL_SECONDS\n)\nputs client.caches.to_a.join(", ")\n  ',cli:"momento cache list",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"flush-cache"},"Flush cache"),(0,l.kt)("p",null,"Flushes all data from a cache"),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache to be flushed.")))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"While you could use ",(0,l.kt)("a",{parentName:"p",href:"#delete-cache"},"Delete Cache"),", then ",(0,l.kt)("a",{parentName:"p",href:"#create-cache"},"Create Cache")," to mimic this, the FlushCache API keeps the settings and only deletes the data in the cache.")),(0,l.kt)("h2",{id:"data-apis"},"Data APIs"),(0,l.kt)("p",null,"These API methods are used to directly interact with data in a cache."),(0,l.kt)("h3",{id:"set"},"Set"),(0,l.kt)("p",null,"Sets the value in cache with a given Time To Live (TTL) seconds. If a value for this key is already present it will be replaced by the new value."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be added.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The value to be stored.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ttlSeconds"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to Live for the item in Cache.")))),(0,l.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.set('test-cache', 'test-key', 'test-value');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.set('test-cache', 'test-key', 'test-value')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.set('test-cache', 'test-key', 'test-value');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Set(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n    Value:     "test-value",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.SetAsync("test-cache", "test-key", "test-value");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .set(&cache_name, key.clone(), value.clone(), None)\n    .await\n    .unwrap();\n    ',ruby:"\nrequire 'momento'\nMOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\nDEFAULT_TTL_SECONDS = 15\nclient = Momento::SimpleCacheClient.new(\n  auth_token: MOMENTO_AUTH_TOKEN, default_ttl: DEFAULT_TTL_SECONDS\n)\nresponse = client.set('test-cache', 'test-key', 'test-value')\nraise response.error if response.error?\n  ",cli:"momento cache set --key test-key --value test-value",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"get"},"Get"),(0,l.kt)("p",null,"Get the cache value stored for the given key."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be added.")))),(0,l.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.get('test-cache', 'test-key');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.get('test-cache', 'test-key')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.get('test-cache', 'test-key');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Get(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.GetAsync("test-cache", "test-key");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .get(&cache_name, key.clone())\n    .await\n    .unwrap();\n    ',ruby:"\nrequire 'momento'\nMOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\nDEFAULT_TTL_SECONDS = 15\nclient = Momento::SimpleCacheClient.new(\n  auth_token: MOMENTO_AUTH_TOKEN, default_ttl: DEFAULT_TTL_SECONDS\n)\nresponse = client.get('test-cache', 'test-key')\nif response.hit?\n  puts response.value_string\nelsif response.miss?\n  puts \"The item was not in the cache.\"\nelsif response.error?\n  raise response.error\nend\n  ",cli:"momento cache get --key test-key --value test-value",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"delete"},"Delete"),(0,l.kt)("p",null,"Delete the cache value stored for the given key."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"[]Byte"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be deleted.")))),(0,l.kt)(r.A,{js:"\nconst authToken=\"eyJhbGc.MyTestToken\";\nconst defaultTTL = 15;\nconst momento = new SimpleCacheClient(authToken, defaultTtl);\nmomento.delete('test-cache', 'test-key');\n",python:"\nimport momento.simple_cache_client as scc\n\n_MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\n_ITEM_DEFAULT_TTL_SECONDS = 15\n\nwith scc.SimpleCacheClient(_MOMENTO_AUTH_TOKEN, _ITEM_DEFAULT_TTL_SECONDS) as cache_client:\n    cache_client.delete('test-cache', 'test-key')\n",java:"\nString MOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\";\nint DEFAULT_ITEM_TTL_SECONDS = 15;\n\nSimpleCacheClient simpleCacheClient = SimpleCacheClient\n    .builder(MOMENTO_AUTH_TOKEN, DEFAULT_ITEM_TTL_SECONDS)\n    .build()\n\nsimpleCacheClient.delete('test-cache', 'test-key');\n    ",go:'\nconst (\n    authToken             = "eyJhbGc.MyTestToken"\n    itemDefaultTtlSeconds = 15\n)\nclient, err := momento.NewSimpleCacheClient(authToken, itemDefaultTtlSeconds)\nif err != nil {\n    panic(err)\n}\n_, err = client.Delete(&CacheSetRequest{\n    CacheName: "test-cache",\n    Key:       "test-key",\n})\n    ',csharp:'\nTimeSpan DEFAULT_TTL = TimeSpan.FromSeconds(15);\nICredentialProvider authProvider = new StringMomentoTokenProvider("eyJhbGc.MyTestToken");\nusing SimpleCacheClient client = new SimpleCacheClient(Configurations.Laptop.Latest(), authProvider, DEFAULT_TTL);\nawait client.DeleteAsync("test-cache", "test-key");\n    ',rust:'\nlet auth_token = "eyJhbGc.MyTestToken";\nlet item_default_ttl_seconds = 15;\nlet mut cache_client = SimpleCacheClientBuilder::new(\n    auth_token,\n    NonZeroU64::new(item_default_ttl_seconds).unwrap(),\n)\n.unwrap()\n.build();\n\nlet cache_name = String::from("cache");\nlet key = String::from("my_key");\nlet value = String::from("my_value");\ncache_client\n    .delete(&cache_name, key.clone())\n    .await\n    .unwrap();\n    ',ruby:"\nrequire 'momento'\nMOMENTO_AUTH_TOKEN = \"eyJhbGc.MyTestToken\"\nDEFAULT_TTL_SECONDS = 15\nclient = Momento::SimpleCacheClient.new(\n  auth_token: MOMENTO_AUTH_TOKEN, default_ttl: DEFAULT_TTL_SECONDS\n)\nresponse = client.delete('test-cache', 'test-key')\nraise response.error if response.error?\n  ",cli:"momento cache delete --key test-key --value test-value",mdxType:"SdkExamples"}),(0,l.kt)("h3",{id:"increment"},"Increment"),(0,l.kt)("p",null,"Adds to the value of a field, if and only if the existing value is a UTF-8 string representing a base 10 integer. If the field does not exist, this method sets the field's value to the amount to increment by."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"field"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value is to be deleted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"The quantity to add to the value. May be positive, negative, or zero. Defaults to 1.")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The resulting incremented value must be between -9223372036854775808 and 9223372036854775807, ie. a signed 64-bit integer. If not, there will be an error response.")),(0,l.kt)("h3",{id:"ping"},"Ping"),(0,l.kt)("p",null,"Sends a ping to the server. This API can be used for checking connectivity to confirm that the client can connect to the server successfully."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Method response object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* Success\n* Error\n\nSee [response objects](/ja/develop/api-reference/response-objects) for specific information.\n"))),(0,l.kt)("h3",{id:"keyexists"},"KeyExists"),(0,l.kt)("p",null,"Checks if a provided key exists in the cache."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"String ","|"," byte"),(0,l.kt)("td",{parentName:"tr",align:null},"Key which is to be checked for its existence in the cache.")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Method response object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* Success\n- `exists()`: bool\n* Error\n\nSee [response objects](/ja/develop/api-reference/response-objects) for specific information.\n"))),(0,l.kt)("h3",{id:"keysexist"},"KeysExist"),(0,l.kt)("p",null,"Checks if provided keys exist in the cache."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"keys"),(0,l.kt)("td",{parentName:"tr",align:null},"String[] ","|"," byte[]"),(0,l.kt)("td",{parentName:"tr",align:null},"Keys which are to be checked for their existence in the cache.")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Method response object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* Success\n- `exists()`: bool[]\n* Error\n\nSee [response objects](/ja/develop/api-reference/response-objects) for specific information.\n"))),(0,l.kt)("h3",{id:"setifnotexists"},"SetIfNotExists"),(0,l.kt)("p",null,"Associates the provided value to a cache item with a given key."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"String /"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"String /"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ttlSeconds"),(0,l.kt)("td",{parentName:"tr",align:null},"Duration"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to Live for the item in Cache.")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Method response object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* Stored\n* NotStored\n* Error\n\nSee [response objects](/ja/develop/api-reference/response-objects) for specific information.\n"))),(0,l.kt)("h2",{id:"time-to-live-apis"},"Time to Live APIs"),(0,l.kt)("p",null,"These APIs apply across all cache types."),(0,l.kt)("h3",{id:"updatettl"},"UpdateTtl"),(0,l.kt)("p",null,"Overwrites the TTL of a cache item with the provided value in seconds."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"String ","|"," bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value's TTL is to be updated.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ttl"),(0,l.kt)("td",{parentName:"tr",align:null},"Duration"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to live that you want to update in cache in seconds.")))),(0,l.kt)("h3",{id:"increasettl"},"IncreaseTtl"),(0,l.kt)("p",null,"Increase the TTL seconds for a key to the provided value only if it would increase the TTL."),(0,l.kt)("p",null,"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the TTL is 5 seconds and is increased to 6 seconds, the new TTL will be 6 seconds."),(0,l.kt)("li",{parentName:"ul"},"If the TTL is 5 seconds and is increased to 3 seconds, the TTL will not be increased.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"String ","|"," bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value's TTL is to be increased.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ttl"),(0,l.kt)("td",{parentName:"tr",align:null},"Duration"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to live that you want to increase to.")))),(0,l.kt)("h3",{id:"decreasettl"},"DecreaseTtl"),(0,l.kt)("p",null,"Decrease the TTL seconds for a key to the provided value only if it would decrease the TTL."),(0,l.kt)("p",null,"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the TTL is 5 seconds and is decreased to 3 seconds, the new TTL will be 3 seconds."),(0,l.kt)("li",{parentName:"ul"},"If the TTL is 5 seconds and is decreased to 6 seconds, the TTL will not be decreased.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheName"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"String ","|"," bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The key under which the value's TTL is to be decreased.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ttl"),(0,l.kt)("td",{parentName:"tr",align:null},"Duration"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to live that you want to decrease to.")))),(0,l.kt)("h3",{id:"collection-data-types-cdts"},"Collection data types (CDTs)"),(0,l.kt)("p",null,"Collections may contain different types of structures depending on your use case. Supported data types are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/ja/develop/api-reference/collections/dictionary"},"Dictionaries")," are used to store unordered field:value pairs."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/ja/develop/api-reference/collections/list"},"Lists")," are a collection of ordered elements, sorted in the sequence each element was inserted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/ja/develop/api-reference/collections/sets"},"Sets")," are an unordered collection of unique elements in string format.")),(0,l.kt)("p",null,"For more in-depth information on usage, see ",(0,l.kt)("a",{parentName:"p",href:"/ja/develop/datatypes"},"collection data types"),"."),(0,l.kt)("h2",{id:"current-status-of-api-support-in-sdks"},"Current status of API support in SDKs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Feature"),(0,l.kt)("th",{parentName:"tr",align:null},".NET"),(0,l.kt)("th",{parentName:"tr",align:null},"Java"),(0,l.kt)("th",{parentName:"tr",align:null},"Node.js"),(0,l.kt)("th",{parentName:"tr",align:null},"Python"),(0,l.kt)("th",{parentName:"tr",align:null},"PHP"),(0,l.kt)("th",{parentName:"tr",align:null},"Ruby"),(0,l.kt)("th",{parentName:"tr",align:null},"Go"),(0,l.kt)("th",{parentName:"tr",align:null},"Rust"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Control APIs"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Get/Set"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Increment"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Dictionary CDTs"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Set CDTs"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"List CDTs"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Flush Cache"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705")))))}p.isMDXComponent=!0}}]);